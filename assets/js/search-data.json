{
  
    
        "post0": {
            "title": "2",
            "content": "geometric deep learning models . 2.1 ... tensors in pytorch . pip install torch --upgrade . Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (1.9.0+cu111) Collecting torch Downloading torch-1.10.0-cp37-cp37m-manylinux1_x86_64.whl (881.9 MB) |██████████████████████████████▎ | 834.1 MB 1.2 MB/s eta 0:00:39tcmalloc: large alloc 1147494400 bytes == 0x55bad2e38000 @ 0x7f020d191615 0x55ba992c24cc 0x55ba993a247a 0x55ba992c52ed 0x55ba993b6e1d 0x55ba99338e99 0x55ba993339ee 0x55ba992c6bda 0x55ba99338d00 0x55ba993339ee 0x55ba992c6bda 0x55ba99335737 0x55ba993b7c66 0x55ba99334daf 0x55ba993b7c66 0x55ba99334daf 0x55ba993b7c66 0x55ba99334daf 0x55ba992c7039 0x55ba9930a409 0x55ba992c5c52 0x55ba99338c25 0x55ba993339ee 0x55ba992c6bda 0x55ba99335737 0x55ba993339ee 0x55ba992c6bda 0x55ba99334915 0x55ba992c6afa 0x55ba99334c0d 0x55ba993339ee |████████████████████████████████| 881.9 MB 19 kB/s Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch) (3.7.4.3) Installing collected packages: torch Attempting uninstall: torch Found existing installation: torch 1.9.0+cu111 Uninstalling torch-1.9.0+cu111: Successfully uninstalled torch-1.9.0+cu111 ERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. torchvision 0.10.0+cu111 requires torch==1.9.0, but you have torch 1.10.0 which is incompatible. torchtext 0.10.0 requires torch==1.9.0, but you have torch 1.10.0 which is incompatible. Successfully installed torch-1.10.0 . import matplotlib.pyplot as plt import numpy as np import torch import torchvision import torch.nn as nn import torch.utils.data as data . torch.manual_seed(42) print(&quot;Using torch&quot;, torch.__version__) . Using torch 1.10.0+cu102 . ... helper classes and functions . from PIL import Image from torchvision import transforms . !pip install tabletext . Collecting tabletext Downloading tabletext-0.1.tar.gz (6.1 kB) Building wheels for collected packages: tabletext Building wheel for tabletext (setup.py) ... done Created wheel for tabletext: filename=tabletext-0.1-py3-none-any.whl size=6022 sha256=384237e663e1e0614b9290fcd435e0e01872c35657dbc01661714520ea433992 Stored in directory: /root/.cache/pip/wheels/cc/ae/ab/697f6cd9887c63663da889f796c2c7ea280bc407b16f6fd081 Successfully built tabletext Installing collected packages: tabletext Successfully installed tabletext-0.1 . from tabletext import to_text . . method ... info . can currently handle 1- and 2-tensors . def info(obj, name): ty_tens = type( torch.tensor([2]) ) ty_np = type( np.array([2]) ) delim = &quot; &quot; if obj.ndim == 1: display_obj = obj[None,:] elif obj.ndim == 2: display_obj = obj if type(obj) == ty_tens: print( &quot;tensor&quot;, delim, name, &quot; n&quot; ) print( delim, &quot;num. dims &quot;, delim, obj.ndim ) print( delim, &quot;num. entries&quot;, delim, np.array( obj ).size ) print( delim, &quot;shape &quot;, delim, np.array( obj.size() ) ) if type(obj) == ty_np: print( &quot;np array&quot;, delim, name, &quot; n&quot; ) print( delim, &quot;number of dimensions&quot;, obj.ndim ) print( delim, &quot;number of entries&quot;, delim, obj.size ) print( delim, &quot;shape&quot;, delim, obj.shape ) print(&quot; n&quot;) display_list = display_obj.tolist() J = len( display_list ) K = len( display_list[0]) outer_list = [] for j in range(J): inner_list = [] for k in range(K): inner_list += [ str( display_list[j][k] )[:4] ] outer_list += [ inner_list ] print( to_text( outer_list ) ) print(&quot; n n&quot;) . . . . method ... viz_tens . args . tens . | display_size . | . def viz_tens( tens, display_size = 2 ): size = display_size if tens.ndim == 1: display_obj = tens[None,:] display_obj = display_obj.float() elif tens.ndim == 2: display_obj = tens display_obj = display_obj.float() pil_image = transforms.ToPILImage()( display_obj ).convert(&quot;RGB&quot;) fig = plt.figure( figsize = (size, size) ) f_rows, f_cols = 1, 1 fig.add_subplot( f_rows, f_cols, 1 ) plt.tick_params( left = False, bottom = False ) plt.axis(&#39;off&#39;) plt.imshow(pil_image) . . . . method ... viz_tens_list . args . list_of_tensors . | display_size = 6 . | . def viz_tens_list( list_of_tensors, display_size = 6 ): size = display_size image_list = [ transforms.ToPILImage()(x).convert(&quot;RGB&quot;) for x in list_of_tensors ] tensor_list = [ transforms.ToTensor()(image) for image in image_list] grid = torchvision.utils.make_grid( tensor_list, padding = 2, pad_value = 1.0 ) grid_pil = transforms.ToPILImage()(grid).convert(&quot;RGB&quot;) fig = plt.figure( figsize = (size, size) ) f_rows, f_cols = 1, 1 fig.add_subplot( f_rows, f_cols, 1 ) plt.tick_params( left = False, bottom = False ) plt.axis(&#39;off&#39;) plt.imshow(grid_pil) . . . ... initializing tensors . Tensors are similar to NumPy&#39;s ndarrays, except that tensors can run on GPUs or other hardware accelerators. Tensors and NumPy arrays can often share the same underlying memory, eliminating the need to copy data. Tensors are also optimized for automatic differentiation . Here are some ways they can be initialized in torch. . from lists: $ quad$ X_1 = torch.tensor( list_object ) . | from a numpy array $ quad$ X_2 = torch.from_numpy( array_object ) . | with random or constant values, of a given shape. For example, . a. entries all ones: $ quad$ X_3_a = torch.ones( shape ) . b. entries all zeros $ quad$ X_3_b = torch.zeros( shape ) . c. entries are i.i.d. $ text{Unif}(0,1)$ $ quad$ X_3_c = torch.rand( shape ) . d. entries are i.i.d. standard normal $ quad$ X_3_d = torch.randn( shape ) . e. from values stored in memory $ quad$ X_3_e = torch.Tensor( shape ) . f. a list of consecutive integers between $N$ and $M$, inclusive, as tensor object $ quad$ X_3_f = torch.arange(N,M) . | ... 1. from lists . X_1 = torch.tensor( [ 2, 3 ] ) info(X_1, &quot;X1&quot;) viz_tens( 25 * X_1 ) # the factor there to help distinguish values . . tensor X1 num. dims 1 num. entries 2 shape [2] ┌───┬───┐ │ 2 │ 3 │ └───┴───┘ . ... 2. from numpy . X_2 = torch.from_numpy( np.array( [ 2, 3, 4 ] ) ) info(X_2, &quot;&#39;X two&#39;&quot;) viz_tens( 25 * X_2 ) . . tensor &#39;X two&#39; num. dims 1 num. entries 3 shape [3] ┌───┬───┬───┐ │ 2 │ 3 │ 4 │ └───┴───┴───┘ . The next examples allow a shape to be provided as an argument. . shape_dict = {} shape_dict[&quot;i&quot;] = ( 3 ) shape_dict[&quot;ii&quot;] = ( 2, 3 ) shape_dict[&quot;iii&quot;] = ( 2, 3, ) . . ... 3. (a) ones of given shape . for key in shape_dict: s = key X_3_a = torch.ones(shape_dict[s]) info(X_3_a, &quot;&#39;X three (a)&#39;&quot;[:-1] + &quot; &quot; + s + &quot;&#39;&quot; ) viz_tens( 25 * X_3_a ) . . tensor &#39;X three (a) i&#39; num. dims 1 num. entries 3 shape [3] ┌─────┬─────┬─────┐ │ 1.0 │ 1.0 │ 1.0 │ └─────┴─────┴─────┘ tensor &#39;X three (a) ii&#39; num. dims 2 num. entries 6 shape [2 3] ┌─────┬─────┬─────┐ │ 1.0 │ 1.0 │ 1.0 │ ├─────┼─────┼─────┤ │ 1.0 │ 1.0 │ 1.0 │ └─────┴─────┴─────┘ tensor &#39;X three (a) iii&#39; num. dims 2 num. entries 6 shape [2 3] ┌─────┬─────┬─────┐ │ 1.0 │ 1.0 │ 1.0 │ ├─────┼─────┼─────┤ │ 1.0 │ 1.0 │ 1.0 │ └─────┴─────┴─────┘ . ... 3. (b) zeros of given shape . for key in shape_dict: s = key X_3_b = torch.zeros(shape_dict[s]) info(X_3_b, &quot;&#39;X three (a)&#39;&quot;[:-1] + &quot; &quot; + s + &quot;&#39;&quot; ) viz_tens( 25 * X_3_b ) . . tensor &#39;X three (a) i&#39; num. dims 1 num. entries 3 shape [3] ┌─────┬─────┬─────┐ │ 0.0 │ 0.0 │ 0.0 │ └─────┴─────┴─────┘ tensor &#39;X three (a) ii&#39; num. dims 2 num. entries 6 shape [2 3] ┌─────┬─────┬─────┐ │ 0.0 │ 0.0 │ 0.0 │ ├─────┼─────┼─────┤ │ 0.0 │ 0.0 │ 0.0 │ └─────┴─────┴─────┘ tensor &#39;X three (a) iii&#39; num. dims 2 num. entries 6 shape [2 3] ┌─────┬─────┬─────┐ │ 0.0 │ 0.0 │ 0.0 │ ├─────┼─────┼─────┤ │ 0.0 │ 0.0 │ 0.0 │ └─────┴─────┴─────┘ . ... 3. (c) i.i.d. uniform of given shape . for key in shape_dict: s = key X_3_c = torch.rand(shape_dict[s]) info(X_3_c, &quot;X 3 (c) &quot; + &quot; &quot; + s ) viz_tens( 25 * X_3_c ) . . tensor X 3 (c) i num. dims 1 num. entries 3 shape [3] ┌──────┬──────┬──────┐ │ 0.31 │ 0.62 │ 0.73 │ └──────┴──────┴──────┘ tensor X 3 (c) ii num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 0.43 │ 0.30 │ 0.77 │ ├──────┼──────┼──────┤ │ 0.10 │ 0.81 │ 0.30 │ └──────┴──────┴──────┘ tensor X 3 (c) iii num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 0.50 │ 0.40 │ 0.56 │ ├──────┼──────┼──────┤ │ 0.34 │ 0.86 │ 0.48 │ └──────┴──────┴──────┘ . ... 3. (d) i.i.d. standard normal of given shape . for key in shape_dict: s = key X_3_d = torch.randn(shape_dict[s]) info(X_3_d, &quot;X 3 (d)&quot; + &quot; &quot; + s ) viz_tens( 25 * X_3_d ) . . tensor X 3 (d) i num. dims 1 num. entries 3 shape [3] ┌──────┬──────┬──────┐ │ 0.91 │ 0.84 │ -0.0 │ └──────┴──────┴──────┘ tensor X 3 (d) ii num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 0.57 │ -0.9 │ -0.9 │ ├──────┼──────┼──────┤ │ -0.2 │ -0.9 │ 1.85 │ └──────┴──────┴──────┘ tensor X 3 (d) iii num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ -0.2 │ 0.25 │ 1.49 │ ├──────┼──────┼──────┤ │ 0.53 │ -0.1 │ 0.34 │ └──────┴──────┴──────┘ . ... 3. (f) sequence . X_3_f = torch.arange(10,20) info(X_3_f, &quot;X 3 (f)&quot;) viz_tens( 25 * X_3_f ) # note the modular arith. being performed automatically . . tensor X 3 (f) num. dims 1 num. entries 10 shape [10] ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┐ │ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │ 16 │ 17 │ 18 │ 19 │ └────┴────┴────┴────┴────┴────┴────┴────┴────┴────┘ . numpy objects and tensors . Tensors can be converted to numpy arrays, and numpy arrays back to tensors. To transform a numpy array into a tensor, we can use the function torch.from_numpy, and we use np.array for the other direction. . The conversion of tensors to numpy require the tensor to be on the CPU, and not the GPU. . In case you have a tensor on GPU, you need to call .cpu() on the tensor beforehand. Hence, you get a line like np_arr = tensor.cpu().numpy(). . Tensors on the CPU and NumPy arrays can share their underlying memory locations, and changing one will change the other. . t = torch.ones(5) print(f&quot;t: {t}&quot;) n = t.numpy() print(f&quot;n: {n}&quot;) . t: tensor([1., 1., 1., 1., 1.]) n: [1. 1. 1. 1. 1.] . t.add_(1) print(f&quot;t: {t}&quot;) print(f&quot;n: {n}&quot;) . t: tensor([2., 2., 2., 2., 2.]) n: [2. 2. 2. 2. 2.] . ... tensor operations . Most operations existing in numpy also exist in PyTorch. A full list of operations can be found in the PyTorch documentation. . Each torch operation can be run on the GPU. . | By default, tensors are created on the CPU. Unless we are using a package like pytorch-lightning, we need to explicitly move tensors to the GPU using the .to method, after checking GPU availability. . | Copying large tensors across devices can be expensive in terms of time and memory. . | . ... adding tensors . X_1, X_2 = torch.rand(2,3), torch.rand(2,3) viz_tens_list( [ X_1, X_2 ] ) . . Y = X_1 + X_2 viz_tens(Y) . . ... stacking tensors . X_1, X_2 = torch.arange(5,10), torch.arange(10,15) info(X_1, &quot;X 1&quot;) info(X_2, &quot;X 2&quot;) . . tensor X 1 num. dims 1 num. entries 5 shape [5] ┌───┬───┬───┬───┬───┐ │ 5 │ 6 │ 7 │ 8 │ 9 │ └───┴───┴───┴───┴───┘ tensor X 2 num. dims 1 num. entries 5 shape [5] ┌────┬────┬────┬────┬────┐ │ 10 │ 11 │ 12 │ 13 │ 14 │ └────┴────┴────┴────┴────┘ . Y = torch.stack([X_1, X_2], dim = 0) info(Y, &quot;Y&quot;) . . tensor Y num. dims 2 num. entries 10 shape [2 5] ┌────┬────┬────┬────┬────┐ │ 5 │ 6 │ 7 │ 8 │ 9 │ ├────┼────┼────┼────┼────┤ │ 10 │ 11 │ 12 │ 13 │ 14 │ └────┴────┴────┴────┴────┘ . ... in-place operations . Operations that store the result into the operand are called in-place. They are usually marked with a underscore postfix, e.g. &quot;add_&quot; instead of &quot;add&quot;. The operation X.copy_(Y) will change X. . Calling x1 + x2 creates a new tensor containing the sum of the two inputs. However, we can also use in-place operations that are applied directly on the memory of a tensor. We therefore change the values of x2 without the chance to re-accessing the values of x2 before the operation. An example is shown below: . X_1, X_2 = torch.rand(2, 3), torch.rand(2, 3) print(&quot; t&quot;,&quot;before&quot;, &quot; n&quot;) info(X_1, &quot;&#39;X one&#39;&quot;) info(X_2, &quot;&#39;X two&#39;&quot;) print(&quot; n n&quot;) X_2.add_(X_1) print(&quot; t&quot;,&quot;after&quot;,&quot; n&quot;) info(X_1, &quot;&#39;X one&#39;&quot;) info(X_2, &quot;&#39;X two&#39;&quot;) . . before tensor &#39;X one&#39; num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 0.59 │ 0.60 │ 0.57 │ ├──────┼──────┼──────┤ │ 0.63 │ 0.25 │ 0.43 │ └──────┴──────┴──────┘ tensor &#39;X two&#39; num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 0.97 │ 0.83 │ 0.48 │ ├──────┼──────┼──────┤ │ 0.02 │ 0.52 │ 0.15 │ └──────┴──────┴──────┘ after tensor &#39;X one&#39; num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 0.59 │ 0.60 │ 0.57 │ ├──────┼──────┼──────┤ │ 0.63 │ 0.25 │ 0.43 │ └──────┴──────┴──────┘ tensor &#39;X two&#39; num. dims 2 num. entries 6 shape [2 3] ┌──────┬──────┬──────┐ │ 1.56 │ 1.44 │ 1.05 │ ├──────┼──────┼──────┤ │ 0.66 │ 0.78 │ 0.59 │ └──────┴──────┴──────┘ . In-place operations save some memory, but can be problematic when computing derivatives because of an immediate loss of history. Hence, their use is discouraged. . ... reshaping tensors . Another common operation aims at changing the shape of a tensor. A tensor of size (2,3) can be re-organized to any other shape with the same number of elements (e.g. a tensor of size (6), or (3,2), ...). . In PyTorch, this reshaping operation is called view: . X = torch.arange(6) info(X,&quot;X&quot;) . . tensor X num. dims 1 num. entries 6 shape [6] ┌───┬───┬───┬───┬───┬───┐ │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ └───┴───┴───┴───┴───┴───┘ . X = X.view(2, 3) info(X,&quot;X&quot;) . . tensor X num. dims 2 num. entries 6 shape [2 3] ┌───┬───┬───┐ │ 0 │ 1 │ 2 │ ├───┼───┼───┤ │ 3 │ 4 │ 5 │ └───┴───┴───┘ . ... transposing tensors (permuting dimensions) . X = X.permute(1,0) info(X,&quot;X with 0th and 1st dimensions permuted&quot;) . . tensor X with 0th and 1st dimensions permuted num. dims 2 num. entries 6 shape [3 2] ┌───┬───┐ │ 0 │ 3 │ ├───┼───┤ │ 1 │ 4 │ ├───┼───┤ │ 2 │ 5 │ └───┴───┘ . X = X.T info(X, &quot;X transposed again&quot;) . . tensor X transposed again num. dims 2 num. entries 6 shape [2 3] ┌───┬───┬───┐ │ 0 │ 1 │ 2 │ ├───┼───┼───┤ │ 3 │ 4 │ 5 │ └───┴───┴───┘ . ... numpy-like indexing and slicing . X = torch.rand( 4,4 ) info( X, &quot;X&quot; ) info( X[0], &quot;first row of X&quot; ) info( X[:,0], &quot;first column of X&quot; ) info( X[...,-1], &quot;last column of X&quot; ) info( X[:2, -1], &quot;First two rows, last column&quot;) info( X[1:3, :], &quot;Middle two rows&quot; ) . . tensor X num. dims 2 num. entries 16 shape [4 4] ┌──────┬──────┬──────┬──────┐ │ 0.90 │ 0.19 │ 0.46 │ 0.38 │ ├──────┼──────┼──────┼──────┤ │ 0.58 │ 0.97 │ 0.54 │ 0.78 │ ├──────┼──────┼──────┼──────┤ │ 0.88 │ 0.90 │ 0.32 │ 0.38 │ ├──────┼──────┼──────┼──────┤ │ 0.74 │ 0.36 │ 0.73 │ 0.39 │ └──────┴──────┴──────┴──────┘ tensor first row of X num. dims 1 num. entries 4 shape [4] ┌──────┬──────┬──────┬──────┐ │ 0.90 │ 0.19 │ 0.46 │ 0.38 │ └──────┴──────┴──────┴──────┘ tensor first column of X num. dims 1 num. entries 4 shape [4] ┌──────┬──────┬──────┬──────┐ │ 0.90 │ 0.58 │ 0.88 │ 0.74 │ └──────┴──────┴──────┴──────┘ tensor last column of X num. dims 1 num. entries 4 shape [4] ┌──────┬──────┬──────┬──────┐ │ 0.38 │ 0.78 │ 0.38 │ 0.39 │ └──────┴──────┴──────┴──────┘ tensor First two rows, last column num. dims 1 num. entries 2 shape [2] ┌──────┬──────┐ │ 0.38 │ 0.78 │ └──────┴──────┘ tensor Middle two rows num. dims 2 num. entries 8 shape [2 4] ┌──────┬──────┬──────┬──────┐ │ 0.58 │ 0.97 │ 0.54 │ 0.78 │ ├──────┼──────┼──────┼──────┤ │ 0.88 │ 0.90 │ 0.32 │ 0.38 │ └──────┴──────┴──────┴──────┘ . X[:,1] = 0 info(X, &quot;modified X&quot;) . . tensor modified X num. dims 2 num. entries 16 shape [4 4] ┌──────┬─────┬──────┬──────┐ │ 0.90 │ 0.0 │ 0.46 │ 0.38 │ ├──────┼─────┼──────┼──────┤ │ 0.58 │ 0.0 │ 0.54 │ 0.78 │ ├──────┼─────┼──────┼──────┤ │ 0.88 │ 0.0 │ 0.32 │ 0.38 │ ├──────┼─────┼──────┼──────┤ │ 0.74 │ 0.0 │ 0.73 │ 0.39 │ └──────┴─────┴──────┴──────┘ . ... other operations . Here are some ways to perform matrix multiplication: . torch.matmul $ quad$ Performs the matrix product over two tensors, where the specific behavior depends on the dimensions. If both inputs are matrices (2-dimensional tensors), it performs the standard matrix product. For higher dimensional inputs, the function supports broadcasting (for details see the documentation). . It can also be written as a @ b, similar to numpy. . | torch.mm $ quad$ Performs the matrix product over two matrices, but doesn&#39;t support broadcasting (see documentation) . | torch.bmm $ quad$ Performs the matrix product with a support batch dimension. Let T be a tensor of shape (b, n, m), and R a tensor of shape (b, m, p), the output tensor is of shape (b, n , p), obtained by &quot;entry-wise&quot; matrix multiplication along the batch dimension. . | torch.einsum $ quad$ Performs matrix multiplications and more (i.e. sums of products) using the Einstein summation convention. . | . Usually, we use torch.matmul or torch.bmm. . X, Y = torch.arange(6).view(2, 3), torch.arange(9).view(3, 3) info(X,&quot;X&quot;) info(Y,&quot;Y&quot;) . . tensor X num. dims 2 num. entries 6 shape [2 3] ┌───┬───┬───┐ │ 0 │ 1 │ 2 │ ├───┼───┼───┤ │ 3 │ 4 │ 5 │ └───┴───┴───┘ tensor Y num. dims 2 num. entries 9 shape [3 3] ┌───┬───┬───┐ │ 0 │ 1 │ 2 │ ├───┼───┼───┤ │ 3 │ 4 │ 5 │ ├───┼───┼───┤ │ 6 │ 7 │ 8 │ └───┴───┴───┘ . Z = torch.matmul(X,Y) info(Z, &quot;Z&quot;) . . tensor Z num. dims 2 num. entries 6 shape [2 3] ┌────┬────┬────┐ │ 15 │ 18 │ 21 │ ├────┼────┼────┤ │ 42 │ 54 │ 66 │ └────┴────┴────┘ . Given a tensor X, the tensors Y_1,Y_2, Y_3 computed below all have the same value: . Y_1 = X @ X.T Y_2 = X.matmul(X.T) Y_3 = torch.rand_like(X) torch.matmul(X, X.T, out = Y_3) . On the other hand, * denotes the entrywise product of two tensors. . X = torch.arange(6).view(2, 3) info(X,&quot;X&quot;) . . tensor X num. dims 2 num. entries 6 shape [2 3] ┌───┬───┬───┐ │ 0 │ 1 │ 2 │ ├───┼───┼───┤ │ 3 │ 4 │ 5 │ └───┴───┴───┘ . info( X * X, &quot;(a)&quot;) info( X.mul(X), &quot;(b)&quot;) . . tensor (a) num. dims 2 num. entries 6 shape [2 3] ┌───┬────┬────┐ │ 0 │ 1 │ 4 │ ├───┼────┼────┤ │ 9 │ 16 │ 25 │ └───┴────┴────┘ tensor (b) num. dims 2 num. entries 6 shape [2 3] ┌───┬────┬────┐ │ 0 │ 1 │ 4 │ ├───┼────┼────┤ │ 9 │ 16 │ 25 │ └───┴────┴────┘ . You can use torch.cat to concatenate a sequence of tensors along a given dimension. See also torch.stack, another tensor joining op that is subtly different from torch.cat . Y = torch.cat( [X, X, X], dim =1) info(Y, &quot;Y&quot;) . . tensor Y num. dims 2 num. entries 18 shape [2 9] ┌───┬───┬───┬───┬───┬───┬───┬───┬───┐ │ 0 │ 1 │ 2 │ 0 │ 1 │ 2 │ 0 │ 1 │ 2 │ ├───┼───┼───┼───┼───┼───┼───┼───┼───┤ │ 3 │ 4 │ 5 │ 3 │ 4 │ 5 │ 3 │ 4 │ 5 │ └───┴───┴───┴───┴───┴───┴───┴───┴───┘ . If you have a one-element tensor, for example obtained by aggregating all values of a given tensor into a single value, you can convert it to a Python numerical value using item(): . agg = X.sum() agg_item = agg.item() print(agg_item, &quot; t&quot;, type(agg_item)) . . 15 &lt;class &#39;int&#39;&gt; . 2.2 ... one-dimensional convolutions of scalar-valued signals . We now consider one of the simplest possible settings for learning, in which the underlying domain is a one-dimensional grid, and where signals over the domain have only a single channel. . In this case, the signal domain is a group itself, the cyclic group of order $n$, $$ C_n = langle , a : a^n = 1 , rangle equiv { , 1, a, a^2, dots, a^{n-1} , }. $$ It is convenient to parametrize the group, and hence the grid, through the exponent of the generator $$ C_n equiv { 0, 1, dots, n -1 } $$ as this indexing is consistent with the way most python indexes vectors. In this setting, the group operation may be reinterpreted as addition modulo $n$. . As the input domain is fixed, it feels natural to consider the GDL group $G$ to be $C_n$ as well. . We suppose that signals are scalar-valued, and are encoded in the natural basis, so that each $x in mathcal{X}(C_n, mathbb{R})$ may be expressed as . $$ mathcal{X}(C_n, mathbb{R}) = { x : C_n to mathbb{R} } , $$is finite dimensional, and each $x in mathcal{X}(C_n, mathbb{R})$ may be expressed as $$ x = left[ begin{matrix} x_0 vdots ,x_{n-1} , end{matrix} right] $$ . With this basis, we can describe the representation $ rho$ of $G equiv C_n$ concretely, as a matrix. . Given a vector $ theta = ( theta_0 , dots, theta_{n-1})$, recall the associated _circulant matrix_ is the $n times n$ matrix with entries $$ S( theta) := left( , theta_{ (u - v) mod n} right)_{ 0 , leq ,u, ,v , leq n-1 } $$ . In the specific case of $ theta_{+} := (0,1,0, dots, 0)^T$, the associated circulant matrix, $S_{+} := S( theta_{+})$ acts on vectors by shifting the entries of vectors to the right by one position, corresponding to addition by one, modulo $n$. . We call $S_+$ the (right) shift operator. . . Lemma $ quad$ A matrix is circulant if and only if it commutes with $S_+$. Moreover, given any two vectors $ theta, eta in mathbb{R}^n$, one has $S( theta) S( eta) = S( eta) S( theta)$. . . The importance of $S_+$ to the present discussion is that it generates a group isomorphic to the one-dimensional translation group $C_n$; the matrices $ { I, S_+, S_+^2, dots, S^{n-1} }$ constitute a faithful representation of $C_n$. . Circulant matrices are synonymous with discrete convolutions; given $x, theta in mathcal{X}( Omega, mathbb{R}) equiv mathbb{R}^n$, their convolution $x star theta$ is defined by $$ ( x star theta )_u := sum_{v = 0}^{n-1} x_{v mod n} , theta_{ (u-v) mod n} equiv S( theta) x $$ . Thus, the next corollary effectively follows from the much stronger theorem stated at the end of section 1.3. . . Corollary $ quad$ Any $f : mathcal{X}(C_n, mathbb{R}) to mathcal{X}(C_n, mathbb{R})$ which is linear and $C_n$-equivariant can be expressed (in the input coordinate system) as an $n times n$ circulant matrix $S( theta)$ for some vector $ theta$. . . . . ...example: local averaging as a circulant matrix . $ quad$ Recall a previous recipe for an equivariant function $F= Phi( X, A)$ using a local aggregation function $ varphi$. . In our present case of $ Omega equiv G equiv C_n$, we may write this local aggregation more concretely as $$ varphi ( x_u, X_{ textsf{nbhd}(u)} ) = varphi( x_{u-1}, , x_u, , x_{u+1} ), $$ with addition and subtraction in the indices above understood to be modulo $n$. . If in addition, we insist that $ varphi$ is linear, then it has the form $$ varphi( x_{u-1}, , x_u, , x_{u+1} ) = theta_{-1} x_{u-1} + theta_0 x_u + theta_1 x_{u+1}, $$ and in this case we can express $F = Phi (X, A )$ through the following matrix multiplication: $$ left[ begin{matrix} theta_0 &amp; theta_1 &amp; text{ } &amp; text{ } &amp; theta_{-1} theta_{-1} &amp; theta_0 &amp; theta_1 &amp; text{ } &amp; text{ } text{} &amp; ddots &amp; ddots &amp; ddots &amp; text{ } text{ } &amp; text{ } &amp; theta_{-1} &amp; theta_0 &amp; theta_1 theta_1 &amp; text{ } &amp; text{ } &amp; theta_{-1} &amp; theta_0 end{matrix} right] left[ begin{matrix} x_0 x_1 vdots ,x_{n-2} , x_{n-1} end{matrix} right] $$ This multi-diagonal structure is often synonymous with the concept of weight sharing in ML literature. . . . 2.3 ... one-dimensional convolutions in torch . 2.4 ... two-dimensional convolutions in torch . torch.nn.Conv2d . The arguments: . in_channels . | out_channels . | kernel_size . | stride $ quad$ controls the stride for the cross-correlation, a single number or a tuple. . | padding $ quad$ controls amount of padding applied to the input. It can either be a string, &quot;valid&quot; or &quot;same&quot; or a tuple of ints giving the amount of implicit padding applied on both sides. . | dilation $ quad$ controls the spacing between kernel points; &quot;also known as the a trous algorithm . | groups $ quad$ controls connections between inputs and outputs. The in_channels and out_channels must be divisible by groups. For example, . At groups = 1, all inputs are convolved to all outputs . | At groups = 2, the operation becomes equivalent to having two conv layers side by side, each seeing half the input channels, and producing half the output channels, and both subsequently concatenated. . | At groups = in_channels, each input channel is convolved with its own set of filters (of size out_channels // in_channels) . | . | bias . | padding_mode, . | device, . | dtype . | . Let us now relate the shapes of the input and output to the parameters . input parameter LaTeX symbol . in_channels | $ text{dim}( mathcal{C})$ | . out_channels | $ text{dim}( mathcal{C}_1)$ | . kernel_size | $k$ | . stride | $ lambda$ | . padding | $ rho$ | . dilation | $ delta$ | . groups | $M$ | . Additionally, we use $N$ for the batch size of the input, N. We also let $(h,w)$ denote the height-width pair describing the shape of the input signal domain. . Correspondingly, we write $(h_1, w_1)$ for the height-width pair describing the shape of the output signal domain. . We remark that the stride can be either integer or a $2$-tuple, whose coordinates describe the vertical and horizontal stride respectively. We still write $ lambda$ for the stride when it is a tuple, and use $ lambda_h equiv lambda[0]$ and $ lambda_w equiv lambda[1]$ to denote its first and second coordinate, in this case. Likewise, the padding and kernel size may be $2$-tuples as well, and we use similar notation to denote their entries. . The full shape of the input to the layer includes the batch dimension, and is thus . $$ (N, text{dim}( mathcal{C}), H, W) ,, $$while the shape of the output is . $$ (N , text{dim}( mathcal{C}_1), H_1, W_1 ) $$These shapes, in particular the spatial dimensions of each, are related as follows: . $ begin{align} H_1 &amp;= left lfloor frac{ H + 2 rho_h - delta_h ( k_h -1) -1 }{ lambda_h} right rfloor W_1 &amp;= left lfloor frac{ W + 2 rho_w - delta_w ( k_w -1) -1 }{ lambda_w} right rfloor end{align}$, . in particular, the batch size does not have any bearing on how the shapes of tensors transform. . The parameters to be learned are the weights $w^1$ and biases $b^1$. These are both Tensor objects, accessed from the layer as Conv2d.weight and Conv2d.bias. The shape of the weight tensor is . $$ textrm{shape}(w^1) = left( , text{dim}( mathcal{C}_1), , text{dim}( mathcal{C}) big/ M , k_h, k_w right) $$The tensor $w^1$ thus has . $$ textrm{size}(w^1) = textrm{dim}( mathcal{C}_1) textrm{dim} ( mathcal{C}) k_h k_w big/ M $$scalar entries. . There is always the question of how to initialize weights. In the case of the Conv2d class, the weights are initialized to be i.i.d. $ text{Unif}( - sqrt{ alpha_1}, sqrt{ alpha_1} )$ random variables, where . $$ alpha_1 := frac{ textrm{dim}( mathcal{C}_1) }{ textrm{size}(w^1)} $$ The bias tensor is a much smaller object, we have . $ begin{align} textrm{shape}(b^1) = ( , textrm{dim}( mathcal{C}_1 ) ,) , , quad textrm{size}(b^1) = textrm{dim}( mathcal{C}_1) end{align} $ . Despite this, we use the same initialization (with mutual independence of all random variables in discussion) for the bias entries as we did for the weights. . ... A simple CNN . We consider possibly the simplest neural network that we can construct through the above blueprint. Suppose we have a binary classification problem, with the following hypothesis space. Let $ textsf{H}_1$ denote the hypothesis space of functions $f : mathcal{X}( C_n, mathbb{R}) to {0,1 }$ of the form . $$ f = A circ P circ mathbf{a} circ B ,, $$where the components of $f$ are . where the components of $f$ are . $B$ : $ quad$ A $C_n$-equivariant function, to be learned. It is represented as a circulant matrix $ mathbf{C}( theta)$, where $ theta$ is a vector $ theta equiv ( theta_0, dots, theta_{n-1})$ whose entries $ theta_j$ are parameters to be learned. . | $ mathbf{a} $ : $ quad$ We consider the ReLU activation function, $a : mathbb{R} to mathbb{R}_{ geq , 0}$ defined by $a(w) = max(0,w)$, for $w in mathbb{R}$. The bold-face $ mathbf{a}$ denotes the entry-wise action of this function on a given vector;for $y equiv ( ,y_1, , dots, , y_n , ) in mathcal{X}(C_n, mathbb{R})$, which we imagine as the output of $B(x)$ for some input signal $x$, we have $ mathbf{a} (y ) = ( , max(0,y_1), , dots, , max(0,y_n) )$. There are no learned parameters in this layer. . | $P$ : $ quad$ A coarsening operator. In this case, let us say it is a zero-padded group homomorphism. . $P : C_n to C_{n / d }$ for some divisor $d mid n$ footnote{zero-padding} , and let us say that it operates through max-pooling on the signal, over the pre-images of each element of $C_{n / d}$. . | $A$ : $ quad$ A global-pooling layer. We assume this has the form of a fully-connected layer, followed by a softmax. Specifically, . | .",
            "url": "https://the-ninth-wave.github.io/geometric-deep-learning/jupyter/2021/10/22/GDL2.html",
            "relUrl": "/jupyter/2021/10/22/GDL2.html",
            "date": " • Oct 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "1",
            "content": "Modern neural network (NN) design is built on two algorithmic principles: hierarchical feature learning (this concerns the architecture of the NN), and learning by local gradient-descent driven by backpropagation (concerning the learning dynamics undergone by the NN). . An instance of training data is modeled as an element of some high-dimensional vector space, making a generic learning problem subject to the curse of dimensionality. Most tasks of interest are not generic; the data comes from the physical world, and so it inherits low-dimensional structure and symmetries. Requiring an NN to respect the symmetries of the data upon which it acts amounts to a prior. . The notes [BBCV21] construct a blueprint for neural network architecture incorporating these priors, termed geometric priors throughout the notes. Importantly, this blueprint provides a unified perspective of the most successful neural network architectures, at least at the level of the building blocks chosen for the network. . 1.1 ... algebra . References . Bronstein-Bruna-Cohen-Velicovic 2021, Geometric deep learning . | A first impression of group representations . | . ... graphs, categories, groups . . Def $ quad$ A graph is a pair $ mathcal{G} = ( mathcal{V}, mathcal{E})$, where $ mathcal{V}$ is a set whose elements are called vertices. The set $ mathcal{E}$ consists of edges, defined to be a multi-set of exactly two vertices in $ mathcal{V}$, not necessarily distinct. . . Def $ quad$ A directed graph is a pair of sets $ mathcal{G} = ( mathcal{V}, mathcal{A})$ of vertices and arrows (or equivalently, directed edges). An arrow is an ordered pair of vertices. Self-edges have no distinct orientations. . . Def $ quad$ Consider an arrow $f$ of a directed graph $ mathcal{G} = ( mathcal{V}, mathcal{A})$, specifically $f equiv (a,b) in mathcal{A}$, with $a,b in mathcal{V}$. The operations $ textsf{dom}$ and $ textsf{cod}$ act on the arrows $f in mathcal{A}$ via $$ textsf{dom}f = a, , textsf{cod} f = b ,, $$ and are called the domain operation and codomain operation, respectively. . . Given arrows, $f$ and $g$ of some directed graph, say that the ordered pair $(g,f)$ is a composable pair if $ textsf{dom} g = textsf{cod} f$. Going forward, we express the relations $a = textsf{dom} f$ and $b = textsf{cod} f$ equivalently as $$ f : a to b , quad text { or } , quad a xrightarrow[ ,]{ f} b $$ . The next definition formalizes the behavior of a collection of structure-respecting maps between mathematical objects. . . Def $ quad$ A category is a directed graph $ mathcal{C} = ( mathcal{O}, mathcal{A})$, whose vertices $ mathcal{O}$ we call objects, such that . For each object $a in mathcal{O}$, there is a unique identity arrow $ textrm{id}_a equiv mathbf{1}_a : a to a$, defined by the following property: for all arrows $f : b to a$ and $g : a to c$, composition with the identity arrow $ mathbf{1}_a $ gives $$ mathbf{1}_a circ f = f quad text{ and } quad g circ mathbf{1}_a = g $$ . | For each composable pair $(g, f)$ of arrows, there is a unique arrow $g circ f$ called their composite, with $g circ f : textsf{dom} f to textsf{cod} g$, such that the composition operation is associative. Namely, for given objects and arrows in the configuration $$a xrightarrow[ ,]{ f} b xrightarrow[ ,]{ g} c xrightarrow[ ,]{ k} d ,, $$ one always has the equality $k circ (g circ f) = (k circ g ) circ f$. . | . Given a category $ mathcal{C} = ( mathcal{O}, mathcal{A})$, let $$ textsf{hom} (b,c) := { , f : f in mathcal{A}, , textsf{dom} f = b in mathcal{O}, , textsf{cod} f = c in mathcal{O} , } $$ denote the set of arrows from $b$ to $c$. We use the terms morphism and arrow interchangeably. . Groups are collections of symmetries. A group $G$ is a category $ mathcal{C} = ( mathcal{O}, mathcal{A})$ with $ mathcal{O} = { o }$ ( so that we may identify $G$ with the collection of arrows $ mathcal{A}$ ) such that each arrow has a unique inverse: for $g in mathcal{A}$, there is an arrow $h$ such that $g circ h = h circ g = mathbf{1}_o$. . Each arrow $g in mathcal{A}$ thus has $ textsf{dom} g = textsf{cod} g = o$. As remarked, the arrows $g in mathcal{A}$ correspond to group elements $g in G$. The categorical interpretation suggests that the group acts on some abstract object $o in mathcal{O}$. In the present context, we care how groups act on data, and how this action is represented to a computer. . ... group representations . Linear representation theory allows uses linear algebra to study groups. . Consider a function $ varphi : G times V to V$, where $G$ is a group, and where $V$ is a vector space over $ mathbb{R}$. Through this function, we can identify group elements $g$ with self-maps of $V$, namely $ varphi(g, cdot) : V to V$. . When the map $ varphi$ is understood, or left general, we write $g.v$ in place of $ varphi(g,v)$, and we write $(g.)$ in place of $ varphi(g, cdot)$. . The &quot;representatives&quot; $(g.)$ of these group elements $g$ can always be composed. If this compositional structure is compatible with the original group operation, we say $ varphi$ is a group action on $V$. . Specifically, $ varphi$ should satisfy $e.v = v$ for all $v in V$, where $e$ denotes the identity element of $G$, and in general one has $(gh).v = g.(h.v)$. . The group action $ varphi$ is $ mathbb{R}$-linear if it is compatible with the $ mathbb{R}$-vector space structure on $V$, i.e. additive and homogeneous. Specifically, if for all $v,w in V$ and all scalars $ lambda in mathbb{R}$, one has $g.(v+w) = g.v + g.w$ and $g.( lambda v) = lambda g.v$. . . Def $ quad$ An $ mathbb{R}$-linear representation of group $G$ over $ mathbb{R}$-vector space $V$ is an $ mathbb{R}$-linear group action on $V$. . . The next example illustrates how linear group representations arise naturally when considering group actions on data. . Input datum are modeled as members of some vector space $ mathcal{X}$, defined with respect to a domain $ Omega$ and a smaller vector space of channels, $ mathcal{C}$. We may assume all vector spaces discussed to be finite dimensional. . Specifically, we consider the vector space of $ mathcal{C}$-valued signals over some finite, discrete domain $ Omega$, which perhaps has some graph structure. This vector space is denoted $ mathcal{X}( Omega, mathcal{C})$. . . . ... example: shifts of RGB images . $ quad$ Consider, for some $n in mathbb{N}$, a signal domain $ Omega = mathbb{T}_n^2$, where $ mathbb{T}_n^2$ denotes the two-dimensional discrete torus of side-length $n$, namely $( mathbb{Z} / n mathbb{Z} )^2$. This domain has natural graph as well as group structures. . If we imagine each vertex of $ Omega$ to be a pixel, we can express an $n times n$-pixel color (RGB) image as a signal $x : Omega to mathbb{R}^3$, with the first, second and third coordinates of $ mathbb{R}^3$ reporting R, G and B values of a given pixel. . We make two observations: . As a vector space, $ mathcal{X}( Omega)$ is isomorphic to $ mathbb{R}^d$, with $d$ typically very large. In the above example, $d = 3n^2$, which is thirty-thousand for a $n times n equiv 100 times 100$ pixel image. . | Any group action on $ Omega$ induces a group action on $ mathcal{X}( Omega)$. . | Expanding on the latter, consider a group action of $G$ on domain $ Omega$. As the torus $ Omega$ already has group structure, it is natural to think of it acting on itself through translations, i.e. we now additionally consider $G = mathbb{T}_n^2$. . The action of $G equiv mathbb{T}_n^2$ on itself $ Omega equiv mathbb{T}_n^2$ induces a $G$-action on $ mathcal{X}( Omega)$ as follows: for $g in G$ signal $x in mathcal{X}( Omega)$, the action $(g, x) mapsto mathbf{g}.x in mathcal{X}( Omega)$ is defined pointwise at each $u in Omega$: $$ ( mathbf{g}.x)(u) := x(g. omega), $$ where the bold $( mathbf{g}.)$ is used to distinguish the action on signals from the action on the domain. . . . To summarize: any $G$-action on the domain $ Omega$ induces an $ mathbb{R}$-linear representation of $G$ over the vector space of signals on $ Omega$. . . . ... example: one-hot encoding . $ quad$ It seems like standard practice to encode the collection of classes associated to some ML classification problem as an orthonormal basis. These are given ( to the computer ) in the usual coordinate basis $$ e_1 equiv (1, 0, dots, 0), , e_2 equiv (0,1, dots, 0), , dots, , e_n equiv (0, dots, 0,1) ,, $$ hence the nomenclature one-hot. In the preceding example, if one considers a one-hot encoding of the vertices of $ mathbb{T}_n^2$, we see that each signal is expressed with respect to this coordinate system, in the sense that $x = sum_{j=1}^n x_j e_j$. . This kind of encoding is useful for considering general symmetries of the domain. For instance, if permuting node labels is a relevant symmetry, the action of the symmetric group $ frak{S}_n$ is naturally represented by $n times n$ permutation matrices. . . . The following definition reformulates the notion of a signal. . . Def $ quad$ A graph $ mathcal{G} = ( mathcal{V}, mathcal{E} )$ is said to be equipped with node features if for each $v in mathcal{V}$, one has the additional data of an $s$-dimensional vector $x(v) in mathbb{R}^s$, called the features of node $v$. . . The term &#39;features&#39; is compatible with the usage in ML, supposing that our input signal has domain some graph $ mathcal{G}$. In this case, we can think of a neural network as a sequence of node-layers built on top of the graph $ mathcal{G}$. . An input signal endows the first node layer of a NN with features, and the weights of the neural network propagate these through to node features on the nodes of the rest of the network. The features on the last layer of the network can be read off as the output of the NN function. . 1.2 ... equivariance . references . Bronstein--Bruna--Cohen--Velicovic 2021, Geometric deep learning . | Maron--Ben-Hamu--Shamir--Lipman 2018, Invariant and equivariant graph networks . | . We henceforth consider groups $G$ acting on some space of signals $ mathcal{X}( Omega)$ through a given action on some fixed signal domain $ Omega$. . The group action is encoded in a linear representation $ rho$, assumed to be described in a given input coordinate system, just as we would need to specify to a computer. Thus, if $ dim ( mathcal{X} ) = n$, for each $g in G$, the object $ rho(g)$ is an $n times n$ matrix with real entries. . The learning dynamics occur in the hypothesis space $ textsf{H}$, a collection of functions $$ textsf{H} subset { , F : mathcal{X}( Omega) to mathcal{Y} , } , $$ where $ mathcal{Y}$ is a vector space of output channels. The point of the learning blueprint is to be able to choose $ textsf{H}$ compatible with the symmetries of input data. The blueprint describes $ textsf{H}$ explicitly, up to hyperparameters such as depth and layer widths. . A key aspect of this blueprint is that $F in textsf{H}$ should be expressed as a composition of functions, most of which are $G$-equivariant. . The requirement of $G$-equivariance constitutes a geometric prior. From this prior, one can derive the architecture of a generic CNN when $G$ corresponds to translations, and a family of generalizations for other domains and group actions. . . Def $ quad$ Let $ rho$ be a representation of group $G$ over $ mathcal{X}( Omega)$, and let $ rho&#39;$ be a representation of the same group over the $ mathbb{R}$-vector space $ mathcal{Y}$. A function $F: mathcal{X}( Omega) to mathcal{Y}$ is $G$-equivariant if for all $g in G$ and all $x in mathcal{X}( Omega)$, we have $ rho&#39;(g) F(x) = F ( rho(g) x )$. . We say $F$ is $G$-invariant if this holds when $ rho&#39;$ is the trivial representation, which is to say $F ( rho(g) x) = F(x)$ for all $g in G$ and $x in mathcal{X}( Omega)$. . . . ... example: permutation invariance and equivariance in data . $ quad$ Suppose we are given either a set $ mathcal{V}$, or more generally a graph $ mathcal{G} = ( mathcal{V}, mathcal{E} )$, with $ # mathcal{V} = n$ in either case. As discussed, a signal over $ mathcal{V} = { v_1, dots, v_n }$ can be thought of as a collection of node features $ { , x(v_1), dots, x(v_n) , }$, with $x(v_j) in mathbb{R}^s$. . Let us stack the node features as rows of the $n times s$ design matrix . $$ X = left[ begin{matrix} x_1 vdots x_n end{matrix} right] , $$which is effectively the same object as signal $x$, provided the vertices are labeled as described. The action of $g in mathfrak{S}_n$ on this input data is naturally represented as an $n times n$ permutation matrix, $P equiv rho(g)$. . One standard way to construct a permutation invariant function $F$ in this setting is through the following recipe: a function $ psi$ is independently applied to every node&#39;s features, and $ varphi$ is applied on its sum-aggregated outputs. $$ F( X) = varphi left( , sum_{j , = , 1}^n psi(x_j) , right) . $$ Such a function can be thought of as reporting some &quot;global statistic&quot; of signal $x$. . Equivariance manifests even more naturally. Suppose we want to apply a function $F$ to the signal to &quot;update&quot; the node features to a set of latent node features. . This is the case in which the NN outputs an image segmentation mask; the underlying domain does not change, but the features at each node are updated to the extent that they may not even agree on the number of channels. . We can stack these latent features into another design matrix, $H = F(X)$. The order of the rows of $H$ should clearly be tied to the order of the rows of $X$, i.e. permutation equivariant: for any permutation matrix $P$, it holds that $F(P X ) = P F(X)$. . As a concrete example of a permutation equivariant function, consider a weight matrix $ theta in mathbb{R}^{s , times , s&#39;}$. This matrix can be used to map a length-$s$ feature vector at a given node to some new, updated feature vector with $s&#39;$ channels. . Applying this matrix to each row of the design matrix is an example of a shared node-wise linear transform, and constitutes a linear, $ mathfrak{S}_n$-equivariant map. Note that, if one wishes to express this map in coordinates, it seems the correct object to consider is a $3$-tensor constructed as a stack of $n$ copies of $ theta$. . . . The above example considered signals over the nodes of a graph only, thus label permutation symmetry applies equally well, regardless of the graph structure ( or lack of structure ) underlying such functions. . In the case that signals $x$ have a domain with graph structure, encoded by adjacency matrix $A$, it feels right to work with a hypothesis space recognizing this structure. . This is to say that we wish to consider functions $F in textsf{H}$ with $F equiv F( X, A )$. Such a function is (label) permutation invariant if $F( P X, , P A P^{ textrm{T}} ) = F ( X, mathbf{A})$, and is permutation equivariant if $$ F( P X, P A P^T ) = PF( X, A) $$ for any permutation matrix $P$. . . Rmk $ quad$ One can characterize linear $ mathfrak{S}_n$-equivariant functions on nodes. . BBCV 21 : $ quad$ &quot;One can verify any such map can be written as a linear combination of two generators, the identity and the average. As observed by Maron et al. 2018, any linear permutation equivariant $F$ can be expressed as a linear combination of fifteen linear generators; remarkably, this family is independent of $n equiv # mathcal{V}$.&quot; . . Amongst the generators discussed just above, the geometric learning blueprint &quot;specifically advocates&quot; for those that are also local, in the sense that the output on node $u$ directly depends on its neighboring nodes in the graph. . We can formalize this constraint explicitly, by defining the $1$-hop neighborhood of node $u$ as $$ textsf{nbhd}(u) equiv textsf{nbhd}_1(u) := { v : { u,v } in mathcal{E} } , $$ as well as the corresponding neighborhood features, $$ X_{ textsf{nbhd}(u)} := { ! { , x_v : v in textsf{nbhd}(u) , } ! } , $$ which is a multiset, as indicated by double-brackets, as distinct nodes may be decorated with the same feature vector. . . . ... example: permutations and local averaging . $ quad$ The node-wise linear transformation described in the previous example can be thought of as operating on $0$-hop neighborhoods of nodes. We generalize this with an example of a function operating on $1$-hop neighborhoods. Instead of a fixed map between feature spaces $ theta : mathbb{R}^s to mathbb{R}^{s&#39;}$, cloned to a pointwise map, we instead specify a local function $$ varphi equiv varphi( , x_u, , X_{ textsf{nbhd}(u)} , ) $$ . operating on the features of a node as well as those of its $1$-hop neighborhood. . We may construct a permutation equivariant function $ Phi$ by applying $ varphi$ to each $1$-hop neighborhood in isolation, and then collecting these into a new feature matrix. . As before, for $ mathcal{V} = { v_1, dots, v_n }$, we write $x_j$ in place of $x({v_j})$, and we similarly write $ textsf{nbhd}(j)$ instead of $ textsf{nbhd}( v_j )$. . $$ Phi ( X, A ) = left[ begin{matrix} varphi( , x_1 , , X_{ textsf{nbhd}(1)} , ) varphi( , x_2 , , X_{ textsf{nbhd}(2)} , ) vdots varphi( , x_n , , X_{ textsf{nbhd}(n)} , ) end{matrix} right] $$The permutation equivariance of $ Phi$ rests on the output of $ varphi$ being independent of the ordering of the nodes in $ textsf{nbhd}(u)$. Thus, if $ varphi$ is permutation invariant, as in a local averaging, this property is satisfied. . . . BBCV 21 : $ quad$ &quot;The choice of $ varphi$ plays a crucial role in the expressive power of the learning scheme.&quot; . When considering signals $x equiv X$ over graphs, it is natural to consider a hypothesis space whose functions operate on the pair $( X, A)$, where $A$ is the adjacency matrix of the signal domain. . Thus, for such signals the domain naturally becomes part of the input. . The GDL blueprint distinguishes between two contexts: . one in which the input domain is fixed, and . | another in which the input domain varies from signal to signal. . | The preceding example demonstrates that, even in the former context, it can be essential that elements of $ textsf{H}$ treat the (fixed) domain as an argument. . When the signal domain has geometric structure, it can often be leveraged to construct a coarsening operator, one of the components of a GDL block in the learning blueprint. Such an operator passes a signal $x in mathcal{X}( Omega)$ to a signal $y in mathcal{X}( Omega&#39;)$, where $ Omega&#39;$ is a coarse-grained version of $ Omega$. . The domain may be fixed for each input, but this domain changes as the signal passes through the layers of the NN, and it is natural that the functions the NN is built out of should pass this data forward. . BBCV 21 : $ quad$ &quot;Due to their additional structure, graphs and grids, unlike sets, can be coarsened in a non-trivial way, giving rise to a variety of pooling operations... more precisely, we cannot define a non-trivial coarsening assuming set structure alone. There exist established approaches that infer topological structure from unordered sets, and those can admit non-trivial coarsening&quot; . 1.3 ... equivariance in neural networks . references . Kondor-Trivedi 2018 | . ... feed-forward neural networks . The building blocks of neural networks are tensor objects. It is convenient for now to present a definition of a neural network without introducing the notion of a tensor. . . Def $ quad$ A feed-forward neural network $$ ( textsf{N}, textsf{S}, b, w, a ) $$ is a directed graph $( textsf{N}, textsf{S})$, called the computation graph, whose vertices $ textsf{N}$ and edges $ textsf{S}$ are equipped with weights, respectively $b$ and $w$, along with an activation function $a$. For simplicity, we assume a single activation function $a$ is used across the network. The objects should satisfy the following: . The vertices $ textsf{N}$ of the computation graph, also called neurons, are partitioned into $L+1$ distinct layers, for some $L in mathbb{N}$. The collection of vertices in layer $ ell$ is denoted $ textsf{N}_ ell$. Layer $ textsf{N}_0$ is called the input layer, while $ textsf{N}_L$ is the output layer. . | We write $ mathfrak{n}_i^ ell$ for the $i$th neuron in layer $ ell$. Each neuron is equipped with a bias parameter, $b_i^ ell$. The vector of biases for neurons in a given layer $ ell$ is denoted $b^ ell$, and the collection of all bias parameters across all layers is denoted $b$. . | The edges $ textsf{S}$ of the computation graph, called synapses, only join neurons in consecutive layers, and importantly, the orientation of each edge always points towards the larger layer. This is why the network is &quot;feed-forward.&quot; . | This structure effectively partitions the synapses into layers, indexed by the largest layer among the two endpoints of the edges. We write $ textsf{S}_ ell$ for the $ ell$th layer of synapses, though we could also write $ textsf{S}_{ ell-1, ell}$ to emphasize that the edges in $ textsf{S}_ ell$ join neurons in $ textsf{N}_{ ell-1}$ to those in $ textsf{N}_ ell$. The synapse in $ textsf{S}_ ell$ joining neuron $ mathfrak{n}_i^{ ell-1}$ to $ mathfrak{n}_j^ ell$ is denoted $ mathfrak{s}_{ij}^{ ell}$. . | Each synapse $ mathfrak{s}_{ij}^{ ell}$ is equipped with a weight parameter, $w_{ij}^{ ell}$. The collection of weights associated to neurons in layer $ ell$ is denoted $w^ ell$, and the collection of all weights across all layers, $w$. . | For all layers but the input layer, and given an input vector $x$, we also denote the activation at layer $ ell$ and the activation at neuron $ mathfrak{n}_j^ ell$ by $a^{ ell}$ and by $a_j^ ell$ respectively. The activations are defined inductively by $$ a_j^ ell = a left( left( sum_{i} w_{ij}^ ell a_i^{ ell-1} right) + b_j^{ ell} right) , $$ with the activation at the $0$th layer, $a^0$ is defined as some input signal $x$, without any transformation applied to it. . | . . The parameter $L$, controlling the number of layers, is the depth of the network, while the width of layer $ ell$ is the number of neurons in the layer. . We will often abuse notation slightly, and write $ textsf{N}$ in place of the quintuple $( textsf{N}, textsf{S}, b, w, a )$. Each feed-forward neural network $ textsf{N}$ of depth $L$ is associated to a function $$x mapsto F_{ textsf{N}}(x) equiv a^L( textsf{N},x)$$ . The function $F_{ textsf{N}}$ can be expressed as the the alternating composition of nonlinearities and transformations between layers . $$ mathbf{a} circ B_L circ mathbf{a} circ B_{L-1} circ mathbf{a} dots circ mathbf{a} circ B_1, $$where $ mathbf{a}$ denotes the nonlinearity $a$ applied entrywise to its vector argument. . In the present subsection, it is convenient to consider each layer of neurons as embedded in $ mathbb{N}$ through some enumeration. Signals in the input layer are thus compactly supported functions $x : mathbb{N} to mathcal{C}$, where $ mathcal{C}$ is the input channel vector space. . As signal $x$ is propagated forward in the network, its codomain may change to a different channel vector space, so that in general, . $$ B_ ell : mathcal{X}_c( mathbb{N}, mathcal{C}_{ ell-1} ) to mathcal{X}_c ( mathbb{N}, mathcal{C}_ ell ), quad z mapsto w^ ell z + b^ ell $$ We may thus express $F_{ textsf{N}}$ as . $$ mathcal{X}_c( mathbb{N}, mathcal{C} ) xrightarrow[ ,]{ B_1} mathcal{X}_c( mathbb{N}, mathcal{C}_1 ) xrightarrow[ ,]{ mathbf{a}} mathcal{X}_c( mathbb{N}, mathcal{C}_1 ) xrightarrow[ ,]{ B_2} mathcal{X}_c( mathbb{N}, mathcal{C}_2) xrightarrow[ ,]{ mathbf{a} } , dots , xrightarrow[ ,]{ B_L} mathcal{X}_c( mathbb{N}, mathcal{C}_L) xrightarrow[ ,]{ mathbf{a} } mathcal{X}_c( mathbb{N}, mathcal{C}_L) $$ This view obscures the width of each layer, as well as the shape of the signal as it propagates through the layers. Nonetheless, it suffices to discuss equivariance in the context of such functions. Henceforth, we use the term neural network to indicate a feed forward neural network. . ... equivariant neural networks . In the present context, we suppose there is a group $G$ acting on each of the signal domains. . As discussed, the signal domains have been obscured by embedding each domain into $ mathbb{N}$. We should keep in mind that these signal domains are changing, a priori, with each new layer. As such, the group $G$ may act differently on the signal domain at each layer, leading to different representations of $G$, which we wish to distinguish in our notation. . For $ ell = 0, dots, L$, let $ rho^ ell$ denote the representation of $G$ at the $ ell$th layer, so that for each $g in G$, $ rho_g^ ell$ is an invertible linear map, . $$ rho_g^ ell : mathcal{X}_c( mathbb{N} , mathcal{C}_ ell) to mathcal{X}_c( mathbb{N} , mathcal{C}_ ell). $$ . Def $ quad$ Let $ textsf{N}$ be a feed-forward neural network of depth $L$. Let $G$ be a group acting on the signal domain of each layer of $ mathbb{N}$. The associated representation of this action on signals, at layer $ ell$, is denoted $ rho^ ell$ as above. The network $ textsf{N}$ is said to be $G$-equivariant if each $B_ ell$ is $G$-equivariant, in the sense that for all $g in G$, and all appropriately supported $z in mathcal{X}_c( mathbb{N}, mathcal{C}_{ ell-1})$, one has . $$ rho_g^{ ell} B_ ell (z) = B_ ell ( rho_g^{ ell-1}z ) $$ . The main result of KT 18 is a classification of equivariant neural networks: they show each $B_ ell$ corresponds to a &quot;generalized&quot; convolutional layer, which we now introduce. . ... convolution . According to the usual analytic definition, given $ varphi, theta : mathbb{R} to mathbb{R}$ sufficiently nice, their convolution $ varphi star theta$ is defined by $$ ( varphi star theta ) (u) = int_{ mathbb{R}} varphi(u-v) theta (v) , textrm{d} v $$ This operation is commutative, and we can interchangeably think of $ varphi$ and $ theta$ as signal and filter. . This definition can be generalized to (say, $ mathbb{R}$-valued) functions/signals over other domains, in particular compact groups, which admit unique Haar probability measures. . . Def $ quad$ Letting $ mu_G$ denote the unique Haar probability measure of compact group $G$, we define the convolution of two functions $ varphi, theta : G to mathbb{R}$ by $$ ( varphi star theta) (g) = int_G varphi(gh^{-1}) theta(h) , textrm{d} mu_G(h) $$ . . We have already seen an instance in which the signal domain is a compact group $-$ when modeling images, RGB or grayscale, we took the domain to be the discrete two-dimensional torus $ mathbb{T}_n^2$. . The domains of the signals that propagate through the network aren&#39;t necessarily groups. In general, we require these domains to be homogeneous spaces, which means they are equipped with a transitive $G$-action. Going forward, we also assume that $G$ is some finite group, which is reasonable if $G$ is to be represented to a computer. . Let $G$ be a compact group acting on homogeneous space $ Omega$. Let us fix a distinguished &quot;basepoint&quot; $ omega_* in Omega$. . The basepoint allows us to index the space $ Omega$ using $G$, through the transitivity of its action. Any $ omega in Omega$ can be expressed as $g. omega_ circ$ for some $g in G$. Let us write $$ [g]_{ Omega} := g. omega_ circ $$ to suppress the dependence of this indexing on the basepoint. . Observe that group elements of $G$ which fix $ omega_0$ form a subgroup, the stabilizer of $ omega_ circ$, denoted $H$. The (left) quotient space $G / H$ is the collection of left cosets . $$ gH := { gh : h in H }, $$and through the map $[ cdot ]_ Omega$, this quotient space can be identified with the domain $ Omega$ itself. . For each coset $gH$, we may pick a coset representative $g&#39; in gH$. For $ omega in Omega$, let $ bar{ omega}$ denote a coset representative of the coset of group elements which map $ omega_ circ$ to $ omega$. . . Def $ quad$ Consider a function $ varphi : G to mathbb{R}$, and suppose that $G$ acts on some homogeneous space $ Omega$, with stabilizer $H$, so that $ Omega cong G/H$. The projection of $ varphi$ to $ Omega$ is the function $ varphi_ downarrow : Omega to mathbb{R}$ given by averaging $ varphi$ over the coset corresponding to a given $ omega in Omega$: $$ varphi_ downarrow ( omega) := frac{1}{ # H} sum_{g in bar{ omega}H} f(g). $$ Conversely, given $ varphi : Omega to mathbb{R}$, the lift of $ varphi$ to $G$ is the function $ varphi^ uparrow: G to mathbb{R}$ given by $$ varphi^ uparrow (g) := varphi([g]_ Omega). $$ . . The notion of a lift allows us to generalize convolution to pairs of functions whose domains are (perhaps distinct) quotient spaces of the group $G$. Let $ Omega$ and $ Omega&#39;$ be such quotient spaces, and consider $ varphi: Omega to mathbb{R}$ and $ theta : Omega to mathbb{R}$; their convolution $ varphi star theta : G to mathbb{R}$ is defined by $$ ( varphi star theta) (g) = sum_{h in G} varphi^ uparrow(gh^{-1}) theta^ uparrow(h) $$ . The definition of a lift generalizes to functions with domain some right quotient space $H backslash G$, consisting of right cosets $$ Hg := { hg : h in H }, $$ as well as to functions defined on the double quotient space $H backslash G / K$, for some subgroups $H, K subset G$, whose elements are the double cosets $$ HgK := { hgk : h in H, k in K }. $$ . Thus, the definition of convolution can be extended to pairs of functions whose domains are any type of quotient space associated to $G$, and the two functions need not have the same type of domain. . . Def $ quad$ Let $G$ be a finite group, and consider two, perhaps distinct, associated homogeneous space $ Omega$ and $ Omega&#39;$. Consider functions $ varphi : Omega to mathbb{R}$ and $ theta : Omega&#39; to mathbb{R}$. The generalized convolution $ varphi star theta : G to mathbb{R}$ is $$ ( varphi star theta) (g) = sum_{h in G} varphi^ uparrow(gh^{-1}) theta^ uparrow(h). $$ . . Now that we have some understanding of the structural requirements we make of signal domains, we are more specific about the output $F_{ textsf{N}}$ of some neural network $ textsf{N}$; it can be expressed as . $$ mathcal{X}( Omega, mathcal{C} ) xrightarrow[ ,]{ B_1} mathcal{X}( Omega_1, mathcal{C}_1 ) xrightarrow[ ,]{ mathbf{a}} mathcal{X}( Omega_1, mathcal{C}_1 ) xrightarrow[ ,]{ B_2} mathcal{X}( Omega_2, mathcal{C}_2) xrightarrow[ ,]{ mathbf{a} } , dots , xrightarrow[ ,]{ B_L} mathcal{X}( Omega_L, mathcal{C}_L) xrightarrow[ ,]{ mathbf{a} } mathcal{X}( Omega_L, mathcal{C}_L), $$where $ Omega equiv Omega_0, Omega_1, dots, Omega_L$ is a sequence of homogeneous spaces associated to $G$. In particular, we may identify each $ Omega_ ell$ with its stabilizer subgroup $H_ ell$ in $G$, so that $ Omega_ ell cong G / H_ ell$. . Let us remark that each affine block $B_ ell$ consists of a linear transformation $T_ ell : mathcal{X}( Omega_{ ell-1}, mathcal{C}_{ ell-1}) to mathcal{X}( Omega_ ell, mathcal{C}_ ell)$, followed by addition of the bias vector $b^ ell$. Previously, $T_ ell$ appeared as the matrix $w^ ell equiv [ w_{ij}^ ell ]_{i,j}$, but it may be most natural to reshape this into a tensor depending on the context. . . Def $ quad$ Let $ textsf{N}$ be a feed-forward neural network of depth $L$, whose layers $ Omega equiv Omega_0, Omega_1, dots, Omega_L$ are homogeneous spaces associated to finite group $G$, with each $ Omega_ ell$ in correspondence with its stabilizer in $G$, denoted $H_ ell$. Let $( mathcal{C}_j)_{j=0}^L$ denote the sequence of channel vector spaces associated to each layer. The affine blocks of $ textsf{N}$ are, as usual, denoted $B_ ell$ for $ ell in {1, dots, L }$, and the linear transformation within each block is denoted $T_ ell$. We call $ textsf{N}$ a $G$-convolutional neural network ($G$-CNN) if each $T_ ell$ may be expressed as $$ T_ ell (z) = z star theta_ ell, $$ for some filter $$ theta_ ell in mathcal{X} ( H_{ ell-1} backslash G / H_ ell , mathcal{C}_{ ell-1} otimes mathcal{C}_{ ell} ), $$ where $ otimes$ denotes the tensor product of vector spaces. . . The relevance of $G$-CNN&#39;s to equivariance in neural networks is encapsulated in the following theorem. . . Theorem (KT 18, Theorem 1) $ quad$ Let $G$ be a compact group with transitive action on each layer of the feed-forward neural network $ textsf{N}$. Then $ textsf{N}$ is $G$-equivariant, in the sense described above, if and only if it is a $G$-CNN. . . Thus, if we feel that $G$-equivariance constitutes an important prior on the network structure, the notion of a $G$-CNN is fundamental. . 1.4 ... tensors . references . Schwarz, Topology for Physicists . | Wald, GR . | . ... vectors and covectors, through the lens of rep. theory . Consider the action of some finite group $G$ on discrete domain $ Omega$. Let $V$ denote the space of $ mathcal{C}$-valued signals, where $ mathcal{C}$ is itself a vector space over $ mathbb{R}$. . In this case, $V$ also has the structure of a vector space over $ mathbb{R}$. The action of $G$ on $ Omega$ induces an action on $V$, putting elements $g$ of $G$ in correspondence with elements of $ textrm{GL}(V)$, which denotes the vector space of invertible linear endomorphisms of $V$. . Let $ rho$ denote the $V$-representation of $G$ just described. A subspace $V&#39; subset V$ is called an invariant subspace of representation $ rho$ if all operators $ rho(g)$ map $V&#39;$ to itself. . Clearly, restricting $ rho$ to $V&#39;$ is itself a representation of $G$ over vector space $V&#39;$. . The representation $ rho$ is called irreducible if there are no invariant subspaces of $V$ other than $V$ itself and the trivial subspace $ {0 }$. . If $ rho_1$ and $ rho_2$ are representations of $G$ over $ mathbb{R}$-vector spaces $V_1$ and $V_2$, their direct sum is defined as the representation $ rho$ of $G$ over $V_1 oplus V_2$ given by $$ rho(g)( v_1, v_2) = ( rho_1(g) v_1, rho_2(g) v_2 ), $$ for any $v_1 in V_1$ and $v_2 in V_2$. . Two representations $ rho_1$ and $ rho_2$ over $V_1$ and $V_2$ are equivalent if there is an isomorphism $ alpha : V_1 to V_2$ so that . $$ alpha rho_1(g) = rho_2(g) alpha $$We say a representation $ rho$ is orthogonal if each $ rho(g)$ is an orthogonal linear transformation. If $W$ is an invariant subspace of an orthogonal representation $ rho$, so is its orthogonal complement $W^ perp$. Furthermore, $W$ and $W^ perp$ inherit representations of $G$ through restriction, and the original representation $G$ is equivalent to the direct sum of these restrictions. . For any representation $ rho$ of compact group $G$ over $V$, one can find a scalar product on $V$ that is invariant under $ rho$. This is equivalent to saying that for an appropriate choice of scalar product on $V$, in terms of $G$, every representation of $G$ over $V$ is orthogonal. One constructs this by taking any scalar product on $V$, and then by averaging its images under the $G$-action. The averaging done is with respect to Haar measure. . Crucially, the existence of this invariant scalar product implies that every finite-dimensional representation of a compact $G$ is equal to the direct sum of irreducible representations. . Let $ textrm{GL}(n, mathbb{R})$ denote the space of $n times n$ matrices with real entries. As the group $ textrm{GL}( mathbb{R}^n)$ of linear transformations of $ mathbb{R}^n$ is isomorphic to $ textrm{GL}(n, mathbb{R})$. Thus we can regard any group homomorphism $G to textrm{GL}(n, mathbb{R})$ as an $n$-dimensional representation of $G$. . In the case that $G$ is itself $ textrm{GL}(n, mathbb{R})$, we have the natural representation $ rho(g) v equiv g v$, called the vector representation. The covector representation is defined by $ rho(g) v$ = $(g^T)^{-1}v$, the latter matrix can be written unambiguously as $g^{-T}$ as inverse and transpose commute with one another. . The elements of a space on which a matrix group acts via the vector representation are vectors, and: . Schwarz:&quot;covectors are defined analogously&quot; We will expand on this after introducing a basis. . By the above discussion, we should feel no loss in generality working with orthogonal representations of groups over some signal $ mathbb{R}$-vector space $V$. Moreover, as feeding any signal to a computer requires choosing a basis for $V$, it is natural to expect this basis to be &quot;maximally compatible&quot; with the orthogonal representation, in the sense that the basis is orthonormal. . ... vectors and covectors, in coordinates . Thus it is natural to assume that an orthonormal basis $(e_j)_{j=1}^n$ for some $n$-dimensional vector space $V$ is always given alongside $V$, and it is through the lens of this basis that we explore the covector representation described above. . The basis furnishes a canonical isomorphism between $V$ and $ mathbb{R}^n$, and hence between $ textrm{GL}(V)$ and $ textrm{GL}(n, mathbb{R})$. On the other hand, the inner product $ langle cdot, cdot rangle$ furnishes a canonical isomorphism between $V$ and its dual $V^*$. . Following the arrows of an imaginary diagram, we have that any representation $ rho$ of $G$ corresponds uniquely to a representation of $G$ over $ mathbb{R}^n$, as well as to a representation of $G$ over the dual space $( mathbb{R}^n)^*$. . In either case, group elements can effectively be identified with $n times n$ matrices. . We will write coordinates of a vector $x in V$ using raised indices, i.e. for . $$ x = x^1e_1 + dots + x^ne_n , equiv ,x^je_j $$the $x^j$ are the coordinates of $x$. We are adopting the usual summation convention for tensors. . The basis $(e_j)$ allows us to identify the vector $x$ with the $n$-tuple $(x^1, dots, x^n) in mathbb{R}^n$. It also gives rise to a canonical identification with a dual basis, through the inner product; this identification induces the isomorphism of $V$ and $V^*$ mentioned above. . Given $e_j$, the associated dual basis vector $e^j$ is given by . begin{align} e^j &amp;= langle e_j, cdot rangle end{align} Having assumed an orthogonal representation, the action of any group element, through the representation, takes the $(e^j)$ to some other orthonormal basis, say $( tilde{e}_j)$. . This leads to the question of how the dual basis $(e^j)$ transforms under mapping $e^j mapsto langle tilde{e}_j, cdot rangle $, and of how coordinates $(x^j)_{j=1}^n$ describing vector $x$ transform under this change of basis, which is effectively the same question. . We can express the basis $( tilde{e}_j )$ in terms of the $( e_j)$ via $$ tilde{e}_j = S^i_je_i , , $$ where $S$ is called the direct transformation matrix from original basis to the new. Let $T$ denote $S^{-1}$, the direct transition matrix from the new basis to the old: $$ e_i = T_i^j tilde{e}_j $$ This inverse determines how the coordinates $x^j$ transform, namely coefficients transform contravariantly: $$ tilde{x}^j = T_i^j x^i ,. $$ . To see this, one starts with the two equivalent expressions for $x$, namely $x^i e_i$ and $ tilde{x}^j tilde{e}_j$, and then uses the identity $e_i = T_i^j tilde{e}_j$ on the first expression. . Let us now explain the form of the covector representation described above. We think of the action of group element $g$ as describing a change of coordinates. The vector representation describes this coordinate change directly, as an action on vectors. . The covector representation encodes how covectors transform under the same change in coordinates. From the above discussion, we know that this transformation on covectors is contravariant, namely the induced action on covectors is given by . $$ langle v , cdot rangle mapsto langle g^{-1}v, cdot rangle , $$but the inner product allows us to transfer this to yet another action on vectors, through the relation . $$ langle g^{-1} v, w rangle = langle v, g^{-T} w rangle , $$thus the covector representation describes how vectors see the induced contravariant transformation. Conveniently, in the orthogonal setting, the vector and covector representations coincide. . ... the abstract index notation . ... tensors . Schwarz loosely defines tensors, with $k$ upper indices and $ ell$ lower indices, as quantities transforming like a product of $k$ vectors and $ ell$ covectors. More precisely, such a tensor $X$ has components $X_{ quad j_1, , dots , , , j_ ell} ^ { i_1, , dots , , , i_k}$, where each index ranges from $1$ to $n$, and where each component, or entry, takes values in either $ mathbb{R}$ or $ mathbb{C}$. . The space of such objects, denoted $ mathcal{T}(k, ell)$ is isomorphic to either $ mathbb{R}^N$ or $ mathbb{C}^N$ where $N = n^{k + ell}$. The transformation rules for tensors allow us to consider a family of induced representations over the vector spaces $ mathcal{T}(k, ell)$, with $k, ell = 0,1,2, dots$, arising from the action of some group element $g$, represented as a matrix, on the original vector space $V cong mathbb{R}^n$. Writing this matrix as $g_i^j$, the induced action on given $X in mathcal{T}(k, ell)$ is to transform it to the tensor $Y in mathcal{T}(k, ell)$ with components . $$ Y_{ quad j_1, , dots , , , j_k} ^ { i_1, , dots , , , i_ ell} = g_{i_1}^{m_1} dots g_{i_ ell}^{m_ ell} gamma_{n_1}^{j_1} dots gamma_{n_k}^{j_k} X_{ quad m_1, , dots , , , m_ ell} ^ { n_1, , dots , , , n_k} ,, $$where above, $ gamma_i^j$ is the matrix corresponding to $g^{-1}$. . The concept of a tensor is closely related to that of a tensor product of representations. Recall that the tensor product $V_1 otimes V_2$ of two vector spaces $V_1$ and $V_2$, with respective bases $e_{(1), ,1}, dots, e_{(1), ,m}$ and $e_{(2), ,1}, dots, e_{(2), ,n}$, is the space of formal linear combinations of the symbols . $$ e_{(1), ,a} otimes e_{(2), ,b}, $$meaning that each element of $V_1 otimes V_2$ can be uniquely expressed in the form . $$ c^{ab} e_{(1), ,a} otimes e_{(2), ,b} $$where $c^{ab}$ are the coefficients of the linear combination. . Suppose $ rho_1$ is a representation of $G$ over $V_1$, and that $ rho_2$ is a representation of $G$ over $V_2$. Suppose that $A = (A^1, dots, A^m) in V_1$ and that $B = (B^1, dots, B^m) in V_2$, so that $A$ and $B$ are each transformed under the $G$ action on each space. By definition, the quantity with components $A^iB^j$ transforms according to the tensor product representation $ rho_1 otimes rho_2$ over $V_1 otimes V_2$. . The representation $ rho_1 otimes rho_2$, acting in $V otimes V_2$, changes the coordinates $c^{ab}$ according to the following law; we denote the result of this transformation by $d^{ab}$ . $$ d^{ab} = ( rho_1(g))_k^a( rho_2(g))_ ell^b c^{k ell}, $$where $( rho_1(g))_k^a$ is the matrix of $ rho_1(g)$ in the basis $e_{(1), ,1}, dots, e_{(1), ,m}$, and analogously for the other matrix. . The following is a coordinate-free definition of a tensor with $k$ upper indices and $ ell$ lower indices. We say such a tensor has valency $(k, ell)$. . . Def $ quad$ A tensor of type, or valency $(k, ell)$ over vector space $V$ is a multilinear map $$ A : underbrace{V^* times , dots , times V^*}_{ k text{ copies }} , times , underbrace{ V times , dots , times V }_{ ell text{ copies }} to mathbb{R} $$ . . tensor operations . Aside from the operations which give $ mathcal{T}(k, ell)$ the structure of a vector space, there are two other operations worth mentioning. . The first is called contraction with respect to the $i$th (dual vector) and $j$th (vector) slots. For $k, ell geq 1$, contraction is a map $$ textsf{c} : mathcal{T}(k, ell) to mathcal{T}(k-1, ell-1) $$ . given by . $$ textsf{c} T = T( dots, e^a, dots ; dots, e_a, dots ), $$where the repeated indexing denotes a sum indexed by $a$, which runs over the dimensions of $V$, and where $(e_a)$ is an orthonormal basis for $V$, with $(e^a)$ the corresponding orthonormal basis for $V^*$. The $e^a$ are in the $i$th slot of $T$, while the $e_a$ are in the $j$th slot of $T$. . Note that the contraction of a tensor of type $(1,1)$, when viewed as a linear map from $V$ to itself, is just the trace of this map. Contraction thus generalizes trace, and both objects are independent of the choice of $e_a$. . The second operation of tensors we define is the outer product of tensors $X in mathcal{T}(k, ell)$ and $Y in mathcal{T}(k&#39;, ell&#39;)$, denoted $X otimes Y$. The tensor $X otimes Y$ lies in $ mathcal{T}( k + k&#39;, ell + ell &#39;)$, and is defined as follows. . Given $(k+k&#39;)$ dual vectors $v^{(1)}, dots, v^{(k+k&#39;)}$ and $( ell + ell&#39;)$ vectors $w_{(1)}, dots, w_{( ell + ell&#39;)}$, we define the action of $X otimes Y$ on these objects to be the product . $$ X( v^{(1)}, dots, v^{(k)} ; w_{(1)}, dots, w_{( ell)}) cdot Y ( v^{(k+1)}, dots, v^{(k + k&#39;)} ; w_{( ell+1)}, dots, w_{( ell + ell&#39;)} ) $$ todo . refine, edit the above section . | follow Wald&#39;s discussion of abstract index notation . | . 1.5 ... GDL blueprint (fixed input domain) . ... setup . Our formal treatment of a classification problem requires the following objects: . A finite group $G$. . | A sequence of discrete domains, $( Omega_j )_{j=0}^L$, with $ Omega equiv Omega_0$ the domain of input signals. . | A sequence of finite dimensional channel vector spaces $( mathcal{C}_j )_{j=0}^L$, with $ mathcal{C}_0 equiv mathcal{C}$ the space of input channels. . | Each $ Omega_j$ is a homogeneous space with respect to $G$, meaning each domain admits a transitive $G$ action, denoted $ xi_j$. In particular, we can write $ Omega_j cong G / H_j$ for some subgroup $H_j subset G$. . | The representations $ xi_j$ induce representions $ rho_j$ over respective signal vector spaces $ mathcal{X}( Omega_j, mathcal{C}_j)$ . | A collection of orthonormal bases for each signal vector space. Unless stated otherwise, for each $j$, these are assumed to have the form $$ e_{(j), , textrm{space} , ,i} otimes e_{(j), , textrm{channel}, , a} $$ where the index $i$ runs between $1$ and $ # Omega_j$, while index $a$ runs between $1$ and $ textrm{dim}( mathcal{C}_j)$. . | . ... three flavors of equivariant map . The essential components of the GDL blueprint are $G$-equivariant maps. . These fall under three general cases, which we distinguish from one another. Each object below should be imagined as associated to some layer $j$, though we omit the subscripts for the time being. We consider at most two domains, $ Omega, tilde{ Omega}$ and at most two channel spaces $ mathcal{C}, tilde{ mathcal{C}}$. The signal domains are as described in the setup, and thus can be expressed as $ Omega equiv G / H$ and $ tilde{ Omega} equiv G / tilde{H}$ for subgroups $H, tilde{H} subset G$. The cases are . Affine, $G$-equivariant maps, $$ tilde{B} : mathcal{X}( Omega, mathcal{C}) to mathcal{X} ( tilde{ Omega}, tilde{ mathcal{C}}) $$ of the following form: first a generalized convolution with filter $$ tilde{ theta} in mathcal{X}(H backslash G / tilde{H} , , mathcal{C} otimes tilde{ mathcal{C}}) ,, $$ followed by the addition of a bias vector $ tilde{b} in mathcal{X}( tilde{ Omega}, tilde{ mathcal{C}} )$. The convolution itself can be expressed as a matrix, with respect to basis $$ e_{ textrm{space}, , ell} otimes tilde{e}_{ textrm{space}, k} otimes e_{ textrm{channel}, , a} otimes tilde{e}_{ textrm{channel}, ,b}, $$ where $ ell$ = $1, dots, # Omega$, $k$ = $1, dots, # tilde{ Omega}$. Likewise, $a$ = $1, dots, textrm{dim}( mathcal{C})$ and $b$ = $1, dots, textrm{dim}( tilde{ mathcal{C}})$. The entries of this matrix, as well as those of the bias vector $ tilde{b}$ are all learned. . | Non-linear activation function $$ mathbf{a} : mathcal{X}( Omega, mathcal{C}) to mathcal{X}( Omega, mathcal{C}) $$ applied &quot;entrywise&quot; to a given input. This implicitly assumes that the input is expressed with respect to the basis $$ e_{ textrm{space}, ell} otimes e_{ textrm{channel}, ,a}, $$ There are no learned parameters associated to this map. Despite its basis dependence, the entrywise application of the nonlinearity is the reason this map is equivariant. . | Equivariant local pooling operators, $$ P : mathcal{X}( Omega, mathcal{C}) to mathcal{X}( tilde{ Omega}, tilde{ mathcal{C}} ) $$ which contain no learnable parameters. These perform a kind of renormalization (or coarse graining) of $ Omega$. These are not in general convolutions, because in particular they are not necessarily linear. In addition to the hope that such renormalization works as in its physics useage, washing away non-essential information, a smaller output layer usually means fewer learned parameters in the network overall. It is also a way to ensure that the successive map examines the preceding signal with an aperture of at least a certain width. . | Before discussing some examples of equivariant pooling in the sense of (3.) above, we remark that convolutional layers can effectively function as renormalization operations as well. . We give three examples of equivariant pooling. . . . ... example: strideless $G$-pooling . . Let $G$ be a finite group; an example we will bear in mind is the usual one for images, with $G equiv Omega equiv mathbb{T}_{2, ,n}$. In addition to the domain being the group acting on itself, we additionally identify $ mathbb{T}_{2, ,n}$ with its Cayley graph. . Thus the graph distance in the Cayley graph endows $ mathbb{T}_{2, ,n}$ with a natural notion of distance. In general, we write $ textsf{d}_G$ to denote this graph distance, and we let $ textsf{B}_G(g,r)$ for $r in mathbb{N}$ denote the ball around $g in G$ of radius $r$, with respect to $ textsf{d}_G$. . Let us consider $ textsf{B}_G(e,r)$, the ball of radius $r$ centered at the group identity. Let us denote this neighborhood as $U$ for brevity. The following defines a pooling operation $P$ on signals $x in mathcal{X}(G, mathcal{C})$: $$ Px(g) = x left( textrm{argmax}_{h , in , g U } | x(h) |_{ mathcal{C}} right), $$ where $ | cdot |_{ mathcal{C} }$ denotes some norm on the channel vector space $ mathcal{C}$. . . . . . ... example: subsampling . . . . . . ... example: coset pooling . . . . ... hypothesis space . ... discussion . Shift-invariance arises naturally in vision and pattern recognition. In this case, the desired function $f in textsf{H}$, typically implemented as a CNN, inputs an image and outputs the probability of the image to contain an object from a certain class. It is often reasonably assumed that the classification result should not be affected by the position of the object in the image, i.e., the function $f$ must be shift-invariant. . Multi-layer perceptrons lack this property, a reason why early (1970s) attempts to apply these architectures to pattern recognition problems failed. The development of NN architectures with local weight sharing, as epitomized by CNNs, was among other reasons motivated by the need for shift-invariant object classification. . A prototypical application requiring shift-equivariance is image segmentation, where the output of $f$ is a pixel-wise image mask. This segmentation mask must follow shifts in the input image. In this example, the domains of the input and output are the same, but since the input has three color channels while the output has emph{one channel per class}, the representations $( rho, mathcal{X}( Omega, mathcal{C}) )$ and $( rho&#39;, mathcal{Y} equiv mathcal{X}( Omega, mathcal{C}&#39;))$ are somewhat different. . When $f$ is implemented as a CNN, it may be written as a composition of $L$ functions, where $L$ is determined by the depth and other hyperparameters: $$ f = f_L circ f_{L-1} circ dots circ f_2 circ f_1 . $$ . Examining the individual layer functions making up CNN, one finds they are not shift-invariant in general but rather shift-equivariant. The last function applied, namely $f_L$, is typically a ``global-pooling&quot; function that is genuinely shift-invariant, causing $f$ to be shift-invariant, but to focus on this ignores the structure we will leverage for purposes of expressivity and regularity. .",
            "url": "https://the-ninth-wave.github.io/geometric-deep-learning/jupyter/2021/10/21/GDL1.html",
            "relUrl": "/jupyter/2021/10/21/GDL1.html",
            "date": " • Oct 21, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://the-ninth-wave.github.io/geometric-deep-learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://the-ninth-wave.github.io/geometric-deep-learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}