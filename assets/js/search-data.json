{
  
    
        "post0": {
            "title": "Lecture 1 ... Introduction",
            "content": ". Example (Mixed $p$-spin models). $ quad$ Let $ Sigma_N$ denote either the hypercube $ { pm 1 }^N$ or the sphere . $$ mathbb{S}_N triangleq { x in mathbb{R}^N : | x |^2 = N }, $$which contains the hypercube. Let $( beta_p)_{p geq 1}$ be a sequence of non-negative numbers, and we suppose . $$ sum_{p geq 1} beta_p^2 &lt; infty . $$Given such a sequence, we define the model function $ xi : mathbb{R} to mathbb{R}$ via . $$ xi(x) triangleq sum_{p geq 1} beta_p^2 x^p $$as well as the associated Hamiltonian $H_N : mathbb{S}_N to mathbb{R}$, where for $s in mathbb{S}$, . $$ H_N(s) := sum_{p geq 1} beta_p N^{- (p-1)/2} sum_{ i_1, dots, i_p } g_{i_1, dots, i_p} s_{i_1} cdot dots cdot s_{i_p}, $$where the $g_{i_1, dots, i_p}$ are i.i.d. standard normal random variables. The model function and the associated Hamiltonian constitute the mixed $p$-spin model associated to $( beta_p)$. . The Hamiltonian is a random function on $ mathbb{S}_N$; the model coefficients $ beta_p$ are taken to be square-summable to ensure that the object $H_N$ is a.s. smooth. . The covariance structure of $H_N$ is a function of the sphere&#39;s geometry: letting $ langle cdot, cdot rangle$ denote the Euclidean inner product, . $$ mathbb{E} H_N (s) H_N(t) = N xi left( N^{-1} langle s , t rangle right) $$ . Let us write . $$ R_{1 text{-}2} := N^{-1} langle s, t rangle equiv frac{ langle s, t rangle } { |s | |t | } $$when $s$ and $t$ are implicit, we refer to $R_{1 text{-}2}$ as their overlap. . When $ xi(x) = x^p$, the model is called the pure $p$-spin model. The pure $2$-spin model is more commonly known as the Sherrington-Kirkpatrick model. We prepend &quot;spherical&quot; to the model name when $ Sigma_N = mathbb{S}_N$ and omit this otherwise. . In any case, we regard $H_N$ as an energy landscape. Here are examples of questions one can ask about $H_N$: . Can we describe the asymptotic topology of the sublevel sets of these models? . | What is the asymptotic ground state energy of such models, i.e., can one show for some $c &lt; 0$ that . | . $$ min_{s in mathbb{S}} frac{H_N(s)}{N} to c quad text{a.s.} , ? $$ Given an inverse temperature parameter $ beta &gt;0 $ (not related to the $ beta_p$), we can form the Gibbs measure $ mu_{N, beta}$ associated to the Hamiltonian $H_N$ and this $ beta$. We suppress the dependence of $ mu_{N, beta}$ on the model function $ xi$. . The Gibbs measure $ mu_{N, beta}$ is thus a random probability measure on the state space $ Sigma_N$. . When $ Sigma_N = mathbb{S}_N$ let us conflate the Gibbs measure $ mathcal{G}_{N, beta}$ with the density which defines it, notationally. The density is with respect to the natural volume measure $ textrm{vol}_N$ on $ mathbb{S}_N$. . $$ mathcal{G}_{N, beta}(s) := frac{1}{ mathcal{Z}_{N, beta} } exp left( - beta H_N(s) right) , textrm{vol}_N( textrm{d} s), $$ where $ mathcal{Z}_{N, beta}$ is the partition function of $ mathcal{G}_{N, beta}$, a random normalizing constant of fundamental importance in statistical mechanics. . When $ Sigma_N = { pm 1 }$, the Gibbs measure $ mathcal{G}_{N, beta}$ is defined analogously. Examples of questions one can ask about these new objects: . Can one compute the limiting free energy of the model, $$ lim_{N to infty} frac{1}{N} log mathcal{Z}_{N, beta} $$ if it exists? | . In the setting of the pure $p$-spin model, for instance, fix a realization of the disorder $g_{i_1, dots, i_p}$. For $ beta &gt;0$ given, consider the associated Gibbs measure $ mathcal{G}_{N, beta}$. . Let $ mathcal{G}_{N, beta}^{ otimes 2}$ denote the law of a pair of configurations (elements $s,t$ of the state space $ Sigma_N$), where the two random variables are sampled from $ mathcal{G}_{N, beta}$, independently of one another. . For such a pair $(s,t) equiv (s_{N, beta}, t_{N, beta}) sim mathcal{G}_{N, beta}^{ otimes 2}$, we can form the overlap random variable . $$ R_{1 text{-}2} triangleq R_{1 text{-}2}(s,t) $$ What can be said about the asymptotic behavior of this random variable, especially as a function of $ beta$? | . Studying the overlap random variable to study the associated Gibbs measure is a way to leverage a phrase I hear repeated by experts, roughly: &quot;we don&#39;t know the ground states of the system, but the system does.&quot; .",
            "url": "https://the-ninth-wave.github.io/geometric-deep-learning/jupyter/2020/05/04/GDL4.html",
            "relUrl": "/jupyter/2020/05/04/GDL4.html",
            "date": " • May 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Lecture 1 ... Introduction",
            "content": ". Example (Mixed $p$-spin models). $ quad$ Let $ Sigma_N$ denote either the hypercube $ { pm 1 }^N$ or the sphere . $$ mathbb{S}_N triangleq { x in mathbb{R}^N : | x |^2 = N }, $$which contains the hypercube. Let $( beta_p)_{p geq 1}$ be a sequence of non-negative numbers, and we suppose . $$ sum_{p geq 1} beta_p^2 &lt; infty . $$Given such a sequence, we define the model function $ xi : mathbb{R} to mathbb{R}$ via . $$ xi(x) triangleq sum_{p geq 1} beta_p^2 x^p $$as well as the associated Hamiltonian $H_N : mathbb{S}_N to mathbb{R}$, where for $s in mathbb{S}$, . $$ H_N(s) := sum_{p geq 1} beta_p N^{- (p-1)/2} sum_{ i_1, dots, i_p } g_{i_1, dots, i_p} s_{i_1} cdot dots cdot s_{i_p}, $$where the $g_{i_1, dots, i_p}$ are i.i.d. standard normal random variables. The model function and the associated Hamiltonian constitute the mixed $p$-spin model associated to $( beta_p)$. . The Hamiltonian is a random function on $ mathbb{S}_N$; the model coefficients $ beta_p$ are taken to be square-summable to ensure that the object $H_N$ is a.s. smooth. . The covariance structure of $H_N$ is a function of the sphere&#39;s geometry: letting $ langle cdot, cdot rangle$ denote the Euclidean inner product, . $$ mathbb{E} H_N (s) H_N(t) = N xi left( N^{-1} langle s , t rangle right) $$ . Let us write . $$ R_{1 text{-}2} := N^{-1} langle s, t rangle equiv frac{ langle s, t rangle } { |s | |t | } $$when $s$ and $t$ are implicit, we refer to $R_{1 text{-}2}$ as their overlap. . When $ xi(x) = x^p$, the model is called the pure $p$-spin model. The pure $2$-spin model is more commonly known as the Sherrington-Kirkpatrick model. We prepend &quot;spherical&quot; to the model name when $ Sigma_N = mathbb{S}_N$ and omit this otherwise. . In any case, we regard $H_N$ as an energy landscape. Here are examples of questions one can ask about $H_N$: . Can we describe the asymptotic topology of the sublevel sets of these models? . | What is the asymptotic ground state energy of such models, i.e., can one show for some $c &lt; 0$ that . | . $$ min_{s in mathbb{S}} frac{H_N(s)}{N} to c quad text{a.s.} , ? $$ Given an inverse temperature parameter $ beta &gt;0 $ (not related to the $ beta_p$), we can form the Gibbs measure $ mu_{N, beta}$ associated to the Hamiltonian $H_N$ and this $ beta$. We suppress the dependence of $ mu_{N, beta}$ on the model function $ xi$. . The Gibbs measure $ mu_{N, beta}$ is thus a random probability measure on the state space $ Sigma_N$. . When $ Sigma_N = mathbb{S}_N$ let us conflate the Gibbs measure $ mathcal{G}_{N, beta}$ with the density which defines it, notationally. The density is with respect to the natural volume measure $ textrm{vol}_N$ on $ mathbb{S}_N$. . $$ mathcal{G}_{N, beta}(s) := frac{1}{ mathcal{Z}_{N, beta} } exp left( - beta H_N(s) right) , textrm{vol}_N( textrm{d} s), $$ where $ mathcal{Z}_{N, beta}$ is the partition function of $ mathcal{G}_{N, beta}$, a random normalizing constant of fundamental importance in statistical mechanics. . When $ Sigma_N = { pm 1 }$, the Gibbs measure $ mathcal{G}_{N, beta}$ is defined analogously. Examples of questions one can ask about these new objects: . Can one compute the limiting free energy of the model, $$ lim_{N to infty} frac{1}{N} log mathcal{Z}_{N, beta} $$ if it exists? | . In the setting of the pure $p$-spin model, for instance, fix a realization of the disorder $g_{i_1, dots, i_p}$. For $ beta &gt;0$ given, consider the associated Gibbs measure $ mathcal{G}_{N, beta}$. . Let $ mathcal{G}_{N, beta}^{ otimes 2}$ denote the law of a pair of configurations (elements $s,t$ of the state space $ Sigma_N$), where the two random variables are sampled from $ mathcal{G}_{N, beta}$, independently of one another. . For such a pair $(s,t) equiv (s_{N, beta}, t_{N, beta}) sim mathcal{G}_{N, beta}^{ otimes 2}$, we can form the overlap random variable . $$ R_{1 text{-}2} triangleq R_{1 text{-}2}(s,t) $$ What can be said about the asymptotic behavior of this random variable, especially as a function of $ beta$? | . Studying the overlap random variable to study the associated Gibbs measure is a way to leverage a phrase I hear repeated by experts, roughly: &quot;we don&#39;t know the ground states of the system, but the system does.&quot; .",
            "url": "https://the-ninth-wave.github.io/geometric-deep-learning/jupyter/2020/05/03/GDL3.html",
            "relUrl": "/jupyter/2020/05/03/GDL3.html",
            "date": " • May 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "2",
            "content": "1.2 $ dots$ equivariance . We henceforth consider groups $G$ acting on some space of signals $ mathcal{X}( Omega)$ over a (fixed) signal domain $ Omega$. The group action is encoded in a linear representation $ rho$, assumed to be described in a given input coordinate system, just as we would need to specify to a computer. Thus, if $ dim ( mathcal{X}( Omega) ) = n$, for each $g in G$, we have that $ rho(g)$ is an $n times n$ matrix with real entries. . The learning dynamics occur in the hypothesis space $ textsf{H}$, a collection of functions $$ textsf{H} subset { , F : mathcal{X}( Omega) to mathcal{Y} , } , $$ where $ mathcal{Y}$ is some unspecified (context-specific) space of output signals. We describe $ textsf{H}$ explicitly in the &quot;learning blueprint&quot;, up to hyperparameters such as depth and layer widths. . A key aspect of this blueprint is that $F in textsf{H}$ should be expressed as a composition of functions, most of which are $G$-equivariant. The requirement of $G$-equivariance constitutes a geometric prior from which one can derive the architecture of a generic CNN when $G$ corresponds to translations, and a family of generalizations for other domains and group actions. . . Def $ quad$ Let $ rho$ be a representation of group $G$ over $ mathcal{X}( Omega)$, and let $ rho&#39;$ be a representation of the same group over the $ mathbb{R}$-vector space $ mathcal{Y}$. A function $F: mathcal{X}( Omega) to mathcal{Y}$ is $G$-equivariant if for all $g in G$ and all $x in mathcal{X}( Omega)$, we have $ rho&#39;(g) F(x) = F ( rho(g) x )$. We say $F$ is $G$-invariant if this holds when $ rho&#39;$ is the trivial representation, which is to say $F ( rho(g) x) = F(x)$ for all $g in G$ and $x in mathcal{X}( Omega)$. . . . Example $ quad$ Suppose we are given either a set $ mathcal{V}$, or more generally a graph $ mathcal{G} = ( mathcal{V}, mathcal{E} )$, with $ # mathcal{V} = n$ in either case. As discussed, a signal over $ mathcal{V} = { v_1, dots, v_n }$ can be thought of as a collection of node features $ { , x(v_1), dots, x(v_n) , }$, with $x(v_j) in mathbb{R}^s$. We stack the node features as rows of the $n times s$ design matrix . $$ mathbf{X} = left[ begin{matrix} x_1 vdots x_n end{matrix} right] , $$which is effectively the same object as signal $x$, provided the vertices are labeled as described. The action of $g in mathfrak{S}_n$ on this input data is naturally represented as an $n times n$ permutation matrix, $ mathbf{P} equiv rho(g)$. . One standard way to construct a permutation invariant function $F$ in this setting is through the following recipe: a function $ psi$ is independently applied to every node&#39;s features, and $ varphi$ is applied on its sum-aggregated outputs. $$ F( mathbf{X}) = varphi left( , sum_{j , = , 1}^n psi(x_j) , right) . $$ Such a function can be thought of as reporting some &quot;global statistic&quot; of signal $x$. . Equivariance manifests even more naturally. Suppose we want to apply a function $F$ to the signal to &quot;update&quot; the node features, producing a set of latent (node) features. . This is the case in which the NN outputs an image segmentation mask; the underlying domain does not change, but the features at each node are updated to the extent that they may not even agree on the number of channels. . We can stack these latent features into another design matrix, $ mathbf{H} = F( mathbf{X})$. The order of the rows of $ mathbf{H}$ should clearly be tied to the order of the rows of $ mathbf{X}$, i.e. permutation equivariant: for any permutation matrix $ mathbf{P}$, it holds that $F( mathbf{P} mathbf{X} ) = mathbf{P} F( mathbf{X})$. . As a concrete example of a permutation equivariant function, consider a weight matrix $ theta in mathbb{R}^{s , times , s&#39;}$. This matrix can be used to map a length-$s$ feature vector at a given node to some new, updated feature vector with $s&#39;$-channels. . Applying this matrix to each row of the design matrix is an example of a shared node-wise linear transform, and constitutes a linear, $ mathfrak{S}_n$-equivariant map. Note that, if one wishes to express this map in coordinates, it seems the correct object to consider is a $3$-tensor, &quot;$ Theta,$&quot; constructed as a stack of $n$ copies of $ theta$. . . . The above example considered signals over the nodes of a graph only, thus label permutation symmetry applies equally well, regardless of the graph structure ( or lack of structure ) underlying such functions. . In the case that signals $x$ have a domain with graph structure, encoded by adjacency matrix $ mathbf{A}$, it feels right to work with a hypothesis space recognizing this structure. . This is to say that we wish to consider functions $F in textsf{H}$ with $F equiv F( mathbf{X}, mathbf{A} )$. Such a function is (label) permutation invariant if $F( mathbf{P} mathbf{X}, , mathbf{P} mathbf{A} mathbf{P}^{ textrm{T}} ) = F ( mathbf{X}, mathbf{A})$, and is permutation equivariant if $$ F( mathbf{P} mathbf{X}, mathbf{P} mathbf{A} mathbf{P}^T ) = mathbf{P}F( mathbf{X}, mathbf{A}) $$ for any permutation matrix $ mathbf{P}$. . . Rmk $ quad$ One can characterize linear $ mathfrak{S}_n$-equivariant functions on nodes. From [BBCV21]: . &quot;One can verify any such map can be written as a linear combination of two generators, the identity and the average. As observed by Maron et al. 2018, any linear permutation equivariant $ mathbf{F}$ can be expressed as a linear combination of fifteen linear generators; remarkably, this family is independent of $n equiv # mathcal{V}$.&quot; . . Rmk $ quad$ Amongst the generators just discussed, the geometric learning blueprint &quot;specifically advocates&quot; for those that are also local, in the sense that the output on node $u$ directly depends on its neighboring nodes in the graph. . . We can formalize this constraint explicitly, by defining the $1$-hop neighborhood of node $u$ as $$ mathcal{N}(u) := { v : { u,v } in mathcal{E} } , $$ as well as the corresponding emph{ B{neighborhood features}}, $$ mathbf{X}_{ mathcal{N}(u)} := { { , x_v : v in mathcal{N}(u) , } } , $$ which is a multiset ( indicated by double-brackets ) for the simple reason that distinct nodes may be decorated with the same feature vector. . . . Example $ quad$ The node-wise linear transformation described in the previous example can be thought of as operating on `$0$-hop neighborhoods&#39; of nodes. We generalize this with an example of a function operating on $1$-hop neighborhoods. Instead of a fixed map between feature spaces $ theta : mathbb{R}^s to mathbb{R}^{s&#39;}$, cloned to a pointwise map $ Theta$, we instead specify a emph{local} function $$ varphi equiv varphi( , x_u, , mathbf{X}_{ mathcal{N}(u)} , ) $$ . operating on the features of a node as well as those of its $1$-hop neighborhood. . We may construct a permutation equivariant function $ Phi$ ( the analogue of $ Theta$ here, just as $ varphi$ corresponds to $ theta$ ) by applying $ varphi$ to each $1$-hop neighborhood in isolation, and then collecting these into a new feature matrix. As before, for $ mathcal{V} = { v_1, dots, v_n }$, we write $x_j$ in place of $x_{v(j)}$, and we similarly write $ mathcal{N}_j$ instead of $ mathcal{N}( v(j) )$. . $$ Phi ( mathbf{X}, mathbf{A} ) = left[ begin{matrix} varphi( , x_1 , , mathbf{X}_{ mathcal{N}_1} , ) varphi( , x_2 , , mathbf{X}_{ mathcal{N}_2} , ) vdots varphi( , x_n , , mathbf{X}_{ mathcal{N}_n} , ) end{matrix} right] $$The permutation equivariance of $ Phi$ rests on the output of $ varphi$ being independent of the ordering of the nodes in $ mathcal{N}_u$. Thus, if $ varphi$ is permutation invariant ( a local averaging ) this property is satisfied. . . . [BBCV21] :&quot;The choice of $ varphi$ plays a crucial role in the expressive power of the learning scheme.&quot; . When considering signals $x equiv mathbf{X}$ over graphs, it is natural to consider a hypothesis space whose functions operates on the pair $( mathbf{X}, mathbf{A})$, where $ mathbf{A}$ is the adjacency matrix of the signal domain. Thus, for such signals the domain naturally becomes part of the input. . The GDL blueprint distinguishes between two contexts: one in which the input domain is fixed, and another in which the input domain varies from signal to signal. The preceding example demonstrates that, even in the former context, it can be essential that elements of $ textsf{H}$ treat the (fixed) domain as an argument. . When the signal domain has geometric structure, it can often be leveraged to construct a coarsening operator, one of the components of a GDL block in the learning blueprint. Such an operator passes a signal $x in mathcal{X}( Omega)$ to a signal $y in mathcal{X}( Omega&#39;)$, where $ Omega&#39;$ is a `coarsened version&#39; of $ Omega$. . As the blueprint calls for a sequence of such blocks, we often wish to act on the latent signal $y$ by a pointwise non-linearity, followed by the action of an equivariant function on signals in $ mathcal{X}( Omega&#39;)$. . The domain may be fixed for each input, but this domain changes as the signal passes through the layers of the NN, and it is natural that the functions the NN is built out of should pass this data forward. . [BBCV21] &quot;Due to their additional structure, graphs and grids, unlike sets, can be coarsened in a non-trivial way, giving rise to a variety of pooling operations... more precisely, we cannot define a non-trivial coarsening assuming set structure alone. There exist established approaches that infer topological structure from unordered sets, and those can admit non-trivial coarsening&quot; .",
            "url": "https://the-ninth-wave.github.io/geometric-deep-learning/jupyter/2020/05/02/GDL2.html",
            "relUrl": "/jupyter/2020/05/02/GDL2.html",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "1",
            "content": "Modern neural network (NN) design is built on two algorithmic principles: hierarchical feature learning ( concerning the architecture of the NN ), and learning by local gradient-descent driven by backpropagation ( concerning the learning dynamics undergone by the NN ). . An instance of training data is modeled as an element of some high-dimensional vector space, making a generic learning problem subject to the curse of dimensionality. Fortunately, most tasks of interest are not generic, inheriting regularities from the underlying low-dimensionality and structure of the physical world. . Exploiting known symmetries of a large system is a useful, classical remedy against the curse of dimensionality, and forms the basis of most physical theories. The notes [BBCV21] construct a blueprint for neural network architecture which incorporates these ``physical&quot; priors, termed geometric priors throughout the notes. Importantly, this blueprint provides a unified perspective of the most successful neural network architectures. . 1.1 categories and groups . . Def $ quad$ A graph is a pair $ mathcal{G} = ( mathcal{V}, mathcal{E})$, where $ mathcal{V}$ is a set whose elements are called vertices. The set $ mathcal{E}$ consists of edges, defined to be a multi-set of exactly two vertices in $ mathcal{V}$, not necessarily distinct. . . Def $ quad$ A directed graph is a pair of sets $ mathcal{G} = ( mathcal{V}, mathcal{A})$ of vertices and arrows (or directed edges). An arrow is an ordered pair of vertices. . . Def $ quad$ Consider an arrow $f$ of a directed graph $ mathcal{G} = ( mathcal{V}, mathcal{A})$, specifically $f equiv (a,b) in mathcal{A}$, with $a,b in mathcal{V}$. The operations $ mathbb{dom}$ and $ mathbb{cod}$ act on the arrows $f in mathcal{A}$ via $ mathbb{dom}f = a, , mathbb{cod} f = b$, and are called the domain operation and codomain operation, respectively. . . $ vdots$ . Given two arrows, $f$ and $g$ in some directed graph, we say that the ordered pair of arrows $(g,f)$ is a composable pair if $ mathbb{dom} g = mathbb{cod} f$. Going forward, let us express the relations $a = mathbb{dom} f$ and $b = mathbb{cod} f$ more concisely via $$ f : a to b , quad text { or equivalently, } , quad a xrightarrow[ ,]{ f} b $$ . The next definition formalizes the behavior of a collection of structure-respecting maps between mathematical objects. . $ vdots$ . . Def $ quad$ A category is a directed graph $ mathcal{C} = ( mathcal{O}, mathcal{A})$, whose vertices $ mathcal{O}$ we call objects, such that . For each object $a in mathcal{O}$, there is a unique identity arrow $ textrm{id}_a equiv mathbf{1}_a : a to a$, defined by the following property: for all arrows $f : b to a$ and $g : a to c$, composition with the identity arrow $ mathbf{1}_a $ gives $$ mathbf{1}_a circ f = f quad text{ and } quad g circ mathbf{1}_a = g $$ . | For each composable pair $(g, f)$ of arrows, there is a unique arrow $g circ f$ called their composite, with $g circ f : mathbb{dom} f to mathbb{cod} g$, such that the composition operation is associative. Namely, for given objects and arrows in the configuration $a xrightarrow[ ,]{ f} b xrightarrow[ ,]{ g} c xrightarrow[ ,]{ k} d$, one always has the equality $k circ (g circ f) = (k circ g ) circ f$. . | . $ vdots$ . Given a category $ mathcal{C} = ( mathcal{O}, mathcal{A})$, let $$ mathbb{hom} (b,c) := { , f : f in mathcal{A}, , mathbb{dom} f = b in mathcal{O}, , mathbb{cod} f = c in mathcal{O} , } $$ denote the set of arrows from $b$ to $c$. Henceforth, we use the terms morphism and arrow interchangeably. . Groups are collections of symmetries. A group $G$ is a category $ mathcal{C} = ( mathcal{O}, mathcal{A})$ with $ mathcal{O} = { o }$ ( so that we may identify $G$ with the collection of arrows $ mathcal{A}$ ) such that each arrow has a unique inverse: for $g in mathcal{A}$, there is an arrow $h$ such that $g circ h = h circ g = mathbf{1}_o$. . Each arrow $g in mathcal{A}$ thus has $ mathbb{dom} g = mathbb{cod} g = o$. As remarked, the arrows $g in mathcal{A}$ correspond to group elements $g in G$. The categorical interpretation suggests that the group emph{acts} on some abstract object $o in mathcal{O}$. In the present context, we care how groups act on data, and how this action is represented to a computer. . $ quad$ group representations . Linear representation theory allows us to study groups using linear algebra (a source ). We start by considering a function $ varphi : G times V to V$, where $G$ is a group, and where $V$ is a vector space over $ mathbb{R}$. This allows us to identify group elements $g$ with functions $ varphi(g, cdot) : V to V$ from the vector space to itself. When the map $ varphi$ is understood, or general ( as now ), we write $g.v$ in place of $ varphi(g,v)$, and we write $(g.)$ in place of $ varphi(g, cdot)$. . The &quot;representatives&quot; $(g.)$ of these group elements $g$ can be composed, and if this compositional structure is compatible with the original group operation, we say $ varphi$ is a group action on $V$. Specifically, $ varphi$ should satisfy $e.v = v$ for all $v in V$, where $e$ denotes the identity element of $G$, and in general one has $(gh).v = g.(h.v)$. . The map $ varphi$ is $ mathbb{R}$-linear if it is compatible with the $ mathbb{R}$-vector space structure on $V$, i.e. additive and homogeneous. Specifically, if for all $v,w in V$ and all scalars $ lambda in mathbb{R}$, one has $g.(v+w) = g.v + g.w$ and $g.( lambda v) = lambda g.v$. . $ vdots$ . . Def $ quad$ An $ mathbb{R}$-linear representation of group $G$ over $ mathbb{R}$-vector space $V$ is an $ mathbb{R}$-linear group action on $V$. . . $ vdots$ . The next example illustrates how linear group representations arise naturally when considering group actions on data. As mentioned, we consider input data as members of some vector space $V$, which we may assume to be finite dimensional for any practical discussion. Specifically, we consider some finite, discrete domain $ Omega$, which may also have the structure of an undirected graph. . A emph{ B{signal}} over $ Omega$ is a function $x : Omega to mathbb{R}^s$, where $s$ is the number of channels. The vector space $ mathcal{X}( Omega, mathbb{R}^s)$ is defined to be the collection of all such signals, for given $ Omega$ and $s$. . $ vdots$ . . . Example $ quad$ Consider, for some $n in mathbb{N}$, a signal domain $ Omega = mathbb{T}_n^2$, where $ mathbb{T}_n^2$ denotes the two-dimensional discrete torus of side-length $n$, namely $( mathbb{Z} / n mathbb{Z} )^2$. This domain has natural graph as well as group structures. . If we imagine each vertex of $ Omega$ to be a pixel, we can express an $n times n$-pixel color (RGB) image as a signal $x : Omega to mathbb{R}^3$, with the first, second and third coordinates of $ mathbb{R}^3$ reporting R, G and B values of a given pixel. . We make two observations: . As a vector space, $ mathcal{X}( Omega)$ is isomorphic to $ mathbb{R}^d$, with $d$ typically very large. In the above example, $d = 3n^2$, which is thirty-thousand for a $n times n equiv 100 times 100$ pixel image. . | Any group action on $ Omega$ induces a group action on $ mathcal{X}( Omega)$. . | Expanding on the latter, consider a group action of $G$ on domain $ Omega$. As the torus $ Omega$ already has group structure, it is natural to think of it acting on itself through translations, i.e. we now additionally consider $G = mathbb{T}_n^2$. . The action of $G equiv mathbb{T}_n^2$ on itself $ Omega equiv mathbb{T}_n^2$ induces a $G$-action on $ mathcal{X}( Omega)$ as follows: for $g in G$ signal $x in mathcal{X}( Omega)$, the action $(g, x) mapsto mathbf{g}.x in mathcal{X}( Omega)$ is defined pointwise at each $u in Omega$: $$ ( mathbf{g}.x)(u) := x(g. omega), $$ where the bold $( mathbf{g}.)$ is used to distinguish the action on signals from the action on the domain. . . . $ vdots$ . To summarize: any $G$-action on the domain $ Omega$ induces an $ mathbb{R}$-linear representation of $G$ over the vector space of signals on $ Omega$. . $ vdots$ . . . Example $ quad$ It seems like standard practice to encode the collection of classes associated to some ML classification problem as an orthonormal basis. These are given ( to the computer ) in the usual coordinate basis $$ e_1 equiv (1, 0, dots, 0), , e_2 equiv (0,1, dots, 0), , dots, , e_n equiv (0, dots, 0,1) ,, $$ hence the nomenclature one-hot. In the preceding example, if one considers a one-hot encoding of the vertices of $ mathbb{T}_n^2$, we see that each signal is expressed with respect to this coordinate system, in the sense that $x = sum_{j=1}^n x_j e_j$. . This kind of encoding is useful for considering general symmetries of the domain. For instance, if permuting node labels is a relevant symmetry, the action of the symmetric group $ frak{S}_n$ is naturally represented by $n times n$ permutation matrices. . . . $ vdots$ . The following definition reformulates the notion of a signal over the nodes of some graph as node features. . $ vdots$ . . Def $ quad$ We say a graph $ mathcal{G} = ( mathcal{V}, mathcal{E} )$ is equipped with emph{ B{node features}} if for each $v in mathcal{V}$, one has the additional data of an $s$-dimensional vector $x(v) in mathbb{R}^s$, called the features of node $v$. . . $ vdots$ . The term &#39;features&#39; is compatible with the usage in ML, supposing that our input signal has domain some graph $ mathcal{G}$. In this case, we can think of a neural network as a sequence of node-layers built ``on top of&quot; the graph $ mathcal{G}$. An input signal endows the first node layer of a NN with features, and the weights of the neural network propagate these through to node features on the nodes of the rest of the network. The features on the last layer of the network can be read off as the output of the NN function. .",
            "url": "https://the-ninth-wave.github.io/geometric-deep-learning/jupyter/2020/05/01/GDL1.html",
            "relUrl": "/jupyter/2020/05/01/GDL1.html",
            "date": " • May 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://the-ninth-wave.github.io/geometric-deep-learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://the-ninth-wave.github.io/geometric-deep-learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}